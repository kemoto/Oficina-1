
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Materia
 * 
 */
export type Materia = $Result.DefaultSelection<Prisma.$MateriaPayload>
/**
 * Model Escola
 * 
 */
export type Escola = $Result.DefaultSelection<Prisma.$EscolaPayload>
/**
 * Model Turma
 * 
 */
export type Turma = $Result.DefaultSelection<Prisma.$TurmaPayload>
/**
 * Model Aluno
 * 
 */
export type Aluno = $Result.DefaultSelection<Prisma.$AlunoPayload>
/**
 * Model TurmaAluno
 * 
 */
export type TurmaAluno = $Result.DefaultSelection<Prisma.$TurmaAlunoPayload>
/**
 * Model Nota
 * 
 */
export type Nota = $Result.DefaultSelection<Prisma.$NotaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Materias
 * const materias = await prisma.materia.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Materias
   * const materias = await prisma.materia.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.materia`: Exposes CRUD operations for the **Materia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Materias
    * const materias = await prisma.materia.findMany()
    * ```
    */
  get materia(): Prisma.MateriaDelegate<ExtArgs>;

  /**
   * `prisma.escola`: Exposes CRUD operations for the **Escola** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Escolas
    * const escolas = await prisma.escola.findMany()
    * ```
    */
  get escola(): Prisma.EscolaDelegate<ExtArgs>;

  /**
   * `prisma.turma`: Exposes CRUD operations for the **Turma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turmas
    * const turmas = await prisma.turma.findMany()
    * ```
    */
  get turma(): Prisma.TurmaDelegate<ExtArgs>;

  /**
   * `prisma.aluno`: Exposes CRUD operations for the **Aluno** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alunos
    * const alunos = await prisma.aluno.findMany()
    * ```
    */
  get aluno(): Prisma.AlunoDelegate<ExtArgs>;

  /**
   * `prisma.turmaAluno`: Exposes CRUD operations for the **TurmaAluno** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TurmaAlunos
    * const turmaAlunos = await prisma.turmaAluno.findMany()
    * ```
    */
  get turmaAluno(): Prisma.TurmaAlunoDelegate<ExtArgs>;

  /**
   * `prisma.nota`: Exposes CRUD operations for the **Nota** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notas
    * const notas = await prisma.nota.findMany()
    * ```
    */
  get nota(): Prisma.NotaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Materia: 'Materia',
    Escola: 'Escola',
    Turma: 'Turma',
    Aluno: 'Aluno',
    TurmaAluno: 'TurmaAluno',
    Nota: 'Nota'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'materia' | 'escola' | 'turma' | 'aluno' | 'turmaAluno' | 'nota'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Materia: {
        payload: Prisma.$MateriaPayload<ExtArgs>
        fields: Prisma.MateriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MateriaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MateriaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload>
          }
          findFirst: {
            args: Prisma.MateriaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MateriaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload>
          }
          findMany: {
            args: Prisma.MateriaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload>[]
          }
          create: {
            args: Prisma.MateriaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload>
          }
          delete: {
            args: Prisma.MateriaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload>
          }
          update: {
            args: Prisma.MateriaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload>
          }
          deleteMany: {
            args: Prisma.MateriaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MateriaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MateriaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MateriaPayload>
          }
          aggregate: {
            args: Prisma.MateriaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMateria>
          }
          groupBy: {
            args: Prisma.MateriaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MateriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MateriaCountArgs<ExtArgs>,
            result: $Utils.Optional<MateriaCountAggregateOutputType> | number
          }
        }
      }
      Escola: {
        payload: Prisma.$EscolaPayload<ExtArgs>
        fields: Prisma.EscolaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EscolaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EscolaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload>
          }
          findFirst: {
            args: Prisma.EscolaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EscolaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload>
          }
          findMany: {
            args: Prisma.EscolaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload>[]
          }
          create: {
            args: Prisma.EscolaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload>
          }
          delete: {
            args: Prisma.EscolaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload>
          }
          update: {
            args: Prisma.EscolaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload>
          }
          deleteMany: {
            args: Prisma.EscolaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EscolaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EscolaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EscolaPayload>
          }
          aggregate: {
            args: Prisma.EscolaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEscola>
          }
          groupBy: {
            args: Prisma.EscolaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EscolaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EscolaCountArgs<ExtArgs>,
            result: $Utils.Optional<EscolaCountAggregateOutputType> | number
          }
        }
      }
      Turma: {
        payload: Prisma.$TurmaPayload<ExtArgs>
        fields: Prisma.TurmaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurmaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurmaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          findFirst: {
            args: Prisma.TurmaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurmaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          findMany: {
            args: Prisma.TurmaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>[]
          }
          create: {
            args: Prisma.TurmaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          delete: {
            args: Prisma.TurmaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          update: {
            args: Prisma.TurmaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          deleteMany: {
            args: Prisma.TurmaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TurmaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TurmaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          aggregate: {
            args: Prisma.TurmaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTurma>
          }
          groupBy: {
            args: Prisma.TurmaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TurmaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurmaCountArgs<ExtArgs>,
            result: $Utils.Optional<TurmaCountAggregateOutputType> | number
          }
        }
      }
      Aluno: {
        payload: Prisma.$AlunoPayload<ExtArgs>
        fields: Prisma.AlunoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlunoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlunoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          findFirst: {
            args: Prisma.AlunoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlunoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          findMany: {
            args: Prisma.AlunoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>[]
          }
          create: {
            args: Prisma.AlunoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          delete: {
            args: Prisma.AlunoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          update: {
            args: Prisma.AlunoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          deleteMany: {
            args: Prisma.AlunoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AlunoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AlunoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlunoPayload>
          }
          aggregate: {
            args: Prisma.AlunoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAluno>
          }
          groupBy: {
            args: Prisma.AlunoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AlunoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlunoCountArgs<ExtArgs>,
            result: $Utils.Optional<AlunoCountAggregateOutputType> | number
          }
        }
      }
      TurmaAluno: {
        payload: Prisma.$TurmaAlunoPayload<ExtArgs>
        fields: Prisma.TurmaAlunoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurmaAlunoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurmaAlunoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload>
          }
          findFirst: {
            args: Prisma.TurmaAlunoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurmaAlunoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload>
          }
          findMany: {
            args: Prisma.TurmaAlunoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload>[]
          }
          create: {
            args: Prisma.TurmaAlunoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload>
          }
          delete: {
            args: Prisma.TurmaAlunoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload>
          }
          update: {
            args: Prisma.TurmaAlunoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload>
          }
          deleteMany: {
            args: Prisma.TurmaAlunoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TurmaAlunoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TurmaAlunoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunoPayload>
          }
          aggregate: {
            args: Prisma.TurmaAlunoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTurmaAluno>
          }
          groupBy: {
            args: Prisma.TurmaAlunoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TurmaAlunoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurmaAlunoCountArgs<ExtArgs>,
            result: $Utils.Optional<TurmaAlunoCountAggregateOutputType> | number
          }
        }
      }
      Nota: {
        payload: Prisma.$NotaPayload<ExtArgs>
        fields: Prisma.NotaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload>
          }
          findFirst: {
            args: Prisma.NotaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload>
          }
          findMany: {
            args: Prisma.NotaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload>[]
          }
          create: {
            args: Prisma.NotaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload>
          }
          delete: {
            args: Prisma.NotaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload>
          }
          update: {
            args: Prisma.NotaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload>
          }
          deleteMany: {
            args: Prisma.NotaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotaPayload>
          }
          aggregate: {
            args: Prisma.NotaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNota>
          }
          groupBy: {
            args: Prisma.NotaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotaGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotaCountArgs<ExtArgs>,
            result: $Utils.Optional<NotaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MateriaCountOutputType
   */

  export type MateriaCountOutputType = {
    turmas: number
  }

  export type MateriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turmas?: boolean | MateriaCountOutputTypeCountTurmasArgs
  }

  // Custom InputTypes

  /**
   * MateriaCountOutputType without action
   */
  export type MateriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MateriaCountOutputType
     */
    select?: MateriaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MateriaCountOutputType without action
   */
  export type MateriaCountOutputTypeCountTurmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaWhereInput
  }



  /**
   * Count Type EscolaCountOutputType
   */

  export type EscolaCountOutputType = {
    turmas: number
    Aluno: number
  }

  export type EscolaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turmas?: boolean | EscolaCountOutputTypeCountTurmasArgs
    Aluno?: boolean | EscolaCountOutputTypeCountAlunoArgs
  }

  // Custom InputTypes

  /**
   * EscolaCountOutputType without action
   */
  export type EscolaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EscolaCountOutputType
     */
    select?: EscolaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * EscolaCountOutputType without action
   */
  export type EscolaCountOutputTypeCountTurmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaWhereInput
  }


  /**
   * EscolaCountOutputType without action
   */
  export type EscolaCountOutputTypeCountAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlunoWhereInput
  }



  /**
   * Count Type TurmaCountOutputType
   */

  export type TurmaCountOutputType = {
    alunos: number
  }

  export type TurmaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alunos?: boolean | TurmaCountOutputTypeCountAlunosArgs
  }

  // Custom InputTypes

  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaCountOutputType
     */
    select?: TurmaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeCountAlunosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaAlunoWhereInput
  }



  /**
   * Count Type AlunoCountOutputType
   */

  export type AlunoCountOutputType = {
    notas: number
    turmas: number
  }

  export type AlunoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notas?: boolean | AlunoCountOutputTypeCountNotasArgs
    turmas?: boolean | AlunoCountOutputTypeCountTurmasArgs
  }

  // Custom InputTypes

  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlunoCountOutputType
     */
    select?: AlunoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeCountNotasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotaWhereInput
  }


  /**
   * AlunoCountOutputType without action
   */
  export type AlunoCountOutputTypeCountTurmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaAlunoWhereInput
  }



  /**
   * Count Type TurmaAlunoCountOutputType
   */

  export type TurmaAlunoCountOutputType = {
    notas: number
  }

  export type TurmaAlunoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notas?: boolean | TurmaAlunoCountOutputTypeCountNotasArgs
  }

  // Custom InputTypes

  /**
   * TurmaAlunoCountOutputType without action
   */
  export type TurmaAlunoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunoCountOutputType
     */
    select?: TurmaAlunoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TurmaAlunoCountOutputType without action
   */
  export type TurmaAlunoCountOutputTypeCountNotasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotaWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Materia
   */

  export type AggregateMateria = {
    _count: MateriaCountAggregateOutputType | null
    _avg: MateriaAvgAggregateOutputType | null
    _sum: MateriaSumAggregateOutputType | null
    _min: MateriaMinAggregateOutputType | null
    _max: MateriaMaxAggregateOutputType | null
  }

  export type MateriaAvgAggregateOutputType = {
    id: number | null
  }

  export type MateriaSumAggregateOutputType = {
    id: number | null
  }

  export type MateriaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MateriaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MateriaCountAggregateOutputType = {
    id: number
    nome: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MateriaAvgAggregateInputType = {
    id?: true
  }

  export type MateriaSumAggregateInputType = {
    id?: true
  }

  export type MateriaMinAggregateInputType = {
    id?: true
    nome?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MateriaMaxAggregateInputType = {
    id?: true
    nome?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MateriaCountAggregateInputType = {
    id?: true
    nome?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MateriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Materia to aggregate.
     */
    where?: MateriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materias to fetch.
     */
    orderBy?: MateriaOrderByWithRelationInput | MateriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MateriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Materias
    **/
    _count?: true | MateriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MateriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MateriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MateriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MateriaMaxAggregateInputType
  }

  export type GetMateriaAggregateType<T extends MateriaAggregateArgs> = {
        [P in keyof T & keyof AggregateMateria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMateria[P]>
      : GetScalarType<T[P], AggregateMateria[P]>
  }




  export type MateriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MateriaWhereInput
    orderBy?: MateriaOrderByWithAggregationInput | MateriaOrderByWithAggregationInput[]
    by: MateriaScalarFieldEnum[] | MateriaScalarFieldEnum
    having?: MateriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MateriaCountAggregateInputType | true
    _avg?: MateriaAvgAggregateInputType
    _sum?: MateriaSumAggregateInputType
    _min?: MateriaMinAggregateInputType
    _max?: MateriaMaxAggregateInputType
  }

  export type MateriaGroupByOutputType = {
    id: number
    nome: string
    createdAt: Date
    updatedAt: Date
    _count: MateriaCountAggregateOutputType | null
    _avg: MateriaAvgAggregateOutputType | null
    _sum: MateriaSumAggregateOutputType | null
    _min: MateriaMinAggregateOutputType | null
    _max: MateriaMaxAggregateOutputType | null
  }

  type GetMateriaGroupByPayload<T extends MateriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MateriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MateriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MateriaGroupByOutputType[P]>
            : GetScalarType<T[P], MateriaGroupByOutputType[P]>
        }
      >
    >


  export type MateriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    turmas?: boolean | Materia$turmasArgs<ExtArgs>
    _count?: boolean | MateriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["materia"]>

  export type MateriaSelectScalar = {
    id?: boolean
    nome?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MateriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turmas?: boolean | Materia$turmasArgs<ExtArgs>
    _count?: boolean | MateriaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MateriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Materia"
    objects: {
      turmas: Prisma.$TurmaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["materia"]>
    composites: {}
  }


  type MateriaGetPayload<S extends boolean | null | undefined | MateriaDefaultArgs> = $Result.GetResult<Prisma.$MateriaPayload, S>

  type MateriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MateriaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: MateriaCountAggregateInputType | true
    }

  export interface MateriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Materia'], meta: { name: 'Materia' } }
    /**
     * Find zero or one Materia that matches the filter.
     * @param {MateriaFindUniqueArgs} args - Arguments to find a Materia
     * @example
     * // Get one Materia
     * const materia = await prisma.materia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MateriaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MateriaFindUniqueArgs<ExtArgs>>
    ): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Materia that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MateriaFindUniqueOrThrowArgs} args - Arguments to find a Materia
     * @example
     * // Get one Materia
     * const materia = await prisma.materia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MateriaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MateriaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Materia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MateriaFindFirstArgs} args - Arguments to find a Materia
     * @example
     * // Get one Materia
     * const materia = await prisma.materia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MateriaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MateriaFindFirstArgs<ExtArgs>>
    ): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Materia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MateriaFindFirstOrThrowArgs} args - Arguments to find a Materia
     * @example
     * // Get one Materia
     * const materia = await prisma.materia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MateriaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MateriaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Materias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MateriaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Materias
     * const materias = await prisma.materia.findMany()
     * 
     * // Get first 10 Materias
     * const materias = await prisma.materia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materiaWithIdOnly = await prisma.materia.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MateriaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MateriaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Materia.
     * @param {MateriaCreateArgs} args - Arguments to create a Materia.
     * @example
     * // Create one Materia
     * const Materia = await prisma.materia.create({
     *   data: {
     *     // ... data to create a Materia
     *   }
     * })
     * 
    **/
    create<T extends MateriaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MateriaCreateArgs<ExtArgs>>
    ): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Materia.
     * @param {MateriaDeleteArgs} args - Arguments to delete one Materia.
     * @example
     * // Delete one Materia
     * const Materia = await prisma.materia.delete({
     *   where: {
     *     // ... filter to delete one Materia
     *   }
     * })
     * 
    **/
    delete<T extends MateriaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MateriaDeleteArgs<ExtArgs>>
    ): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Materia.
     * @param {MateriaUpdateArgs} args - Arguments to update one Materia.
     * @example
     * // Update one Materia
     * const materia = await prisma.materia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MateriaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MateriaUpdateArgs<ExtArgs>>
    ): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Materias.
     * @param {MateriaDeleteManyArgs} args - Arguments to filter Materias to delete.
     * @example
     * // Delete a few Materias
     * const { count } = await prisma.materia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MateriaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MateriaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MateriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Materias
     * const materia = await prisma.materia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MateriaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MateriaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Materia.
     * @param {MateriaUpsertArgs} args - Arguments to update or create a Materia.
     * @example
     * // Update or create a Materia
     * const materia = await prisma.materia.upsert({
     *   create: {
     *     // ... data to create a Materia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Materia we want to update
     *   }
     * })
    **/
    upsert<T extends MateriaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MateriaUpsertArgs<ExtArgs>>
    ): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Materias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MateriaCountArgs} args - Arguments to filter Materias to count.
     * @example
     * // Count the number of Materias
     * const count = await prisma.materia.count({
     *   where: {
     *     // ... the filter for the Materias we want to count
     *   }
     * })
    **/
    count<T extends MateriaCountArgs>(
      args?: Subset<T, MateriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MateriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Materia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MateriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MateriaAggregateArgs>(args: Subset<T, MateriaAggregateArgs>): Prisma.PrismaPromise<GetMateriaAggregateType<T>>

    /**
     * Group by Materia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MateriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MateriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MateriaGroupByArgs['orderBy'] }
        : { orderBy?: MateriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MateriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMateriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Materia model
   */
  readonly fields: MateriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Materia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MateriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    turmas<T extends Materia$turmasArgs<ExtArgs> = {}>(args?: Subset<T, Materia$turmasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Materia model
   */ 
  interface MateriaFieldRefs {
    readonly id: FieldRef<"Materia", 'Int'>
    readonly nome: FieldRef<"Materia", 'String'>
    readonly createdAt: FieldRef<"Materia", 'DateTime'>
    readonly updatedAt: FieldRef<"Materia", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Materia findUnique
   */
  export type MateriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * Filter, which Materia to fetch.
     */
    where: MateriaWhereUniqueInput
  }


  /**
   * Materia findUniqueOrThrow
   */
  export type MateriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * Filter, which Materia to fetch.
     */
    where: MateriaWhereUniqueInput
  }


  /**
   * Materia findFirst
   */
  export type MateriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * Filter, which Materia to fetch.
     */
    where?: MateriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materias to fetch.
     */
    orderBy?: MateriaOrderByWithRelationInput | MateriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materias.
     */
    cursor?: MateriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materias.
     */
    distinct?: MateriaScalarFieldEnum | MateriaScalarFieldEnum[]
  }


  /**
   * Materia findFirstOrThrow
   */
  export type MateriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * Filter, which Materia to fetch.
     */
    where?: MateriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materias to fetch.
     */
    orderBy?: MateriaOrderByWithRelationInput | MateriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Materias.
     */
    cursor?: MateriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Materias.
     */
    distinct?: MateriaScalarFieldEnum | MateriaScalarFieldEnum[]
  }


  /**
   * Materia findMany
   */
  export type MateriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * Filter, which Materias to fetch.
     */
    where?: MateriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Materias to fetch.
     */
    orderBy?: MateriaOrderByWithRelationInput | MateriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Materias.
     */
    cursor?: MateriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Materias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Materias.
     */
    skip?: number
    distinct?: MateriaScalarFieldEnum | MateriaScalarFieldEnum[]
  }


  /**
   * Materia create
   */
  export type MateriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Materia.
     */
    data: XOR<MateriaCreateInput, MateriaUncheckedCreateInput>
  }


  /**
   * Materia update
   */
  export type MateriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Materia.
     */
    data: XOR<MateriaUpdateInput, MateriaUncheckedUpdateInput>
    /**
     * Choose, which Materia to update.
     */
    where: MateriaWhereUniqueInput
  }


  /**
   * Materia updateMany
   */
  export type MateriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Materias.
     */
    data: XOR<MateriaUpdateManyMutationInput, MateriaUncheckedUpdateManyInput>
    /**
     * Filter which Materias to update
     */
    where?: MateriaWhereInput
  }


  /**
   * Materia upsert
   */
  export type MateriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Materia to update in case it exists.
     */
    where: MateriaWhereUniqueInput
    /**
     * In case the Materia found by the `where` argument doesn't exist, create a new Materia with this data.
     */
    create: XOR<MateriaCreateInput, MateriaUncheckedCreateInput>
    /**
     * In case the Materia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MateriaUpdateInput, MateriaUncheckedUpdateInput>
  }


  /**
   * Materia delete
   */
  export type MateriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
    /**
     * Filter which Materia to delete.
     */
    where: MateriaWhereUniqueInput
  }


  /**
   * Materia deleteMany
   */
  export type MateriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Materias to delete
     */
    where?: MateriaWhereInput
  }


  /**
   * Materia.turmas
   */
  export type Materia$turmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    where?: TurmaWhereInput
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    cursor?: TurmaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }


  /**
   * Materia without action
   */
  export type MateriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Materia
     */
    select?: MateriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MateriaInclude<ExtArgs> | null
  }



  /**
   * Model Escola
   */

  export type AggregateEscola = {
    _count: EscolaCountAggregateOutputType | null
    _avg: EscolaAvgAggregateOutputType | null
    _sum: EscolaSumAggregateOutputType | null
    _min: EscolaMinAggregateOutputType | null
    _max: EscolaMaxAggregateOutputType | null
  }

  export type EscolaAvgAggregateOutputType = {
    id: number | null
  }

  export type EscolaSumAggregateOutputType = {
    id: number | null
  }

  export type EscolaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    endereco: string | null
    contato: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EscolaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    endereco: string | null
    contato: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EscolaCountAggregateOutputType = {
    id: number
    nome: number
    endereco: number
    contato: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EscolaAvgAggregateInputType = {
    id?: true
  }

  export type EscolaSumAggregateInputType = {
    id?: true
  }

  export type EscolaMinAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    contato?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EscolaMaxAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    contato?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EscolaCountAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    contato?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EscolaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Escola to aggregate.
     */
    where?: EscolaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Escolas to fetch.
     */
    orderBy?: EscolaOrderByWithRelationInput | EscolaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EscolaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Escolas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Escolas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Escolas
    **/
    _count?: true | EscolaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EscolaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EscolaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EscolaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EscolaMaxAggregateInputType
  }

  export type GetEscolaAggregateType<T extends EscolaAggregateArgs> = {
        [P in keyof T & keyof AggregateEscola]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEscola[P]>
      : GetScalarType<T[P], AggregateEscola[P]>
  }




  export type EscolaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EscolaWhereInput
    orderBy?: EscolaOrderByWithAggregationInput | EscolaOrderByWithAggregationInput[]
    by: EscolaScalarFieldEnum[] | EscolaScalarFieldEnum
    having?: EscolaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EscolaCountAggregateInputType | true
    _avg?: EscolaAvgAggregateInputType
    _sum?: EscolaSumAggregateInputType
    _min?: EscolaMinAggregateInputType
    _max?: EscolaMaxAggregateInputType
  }

  export type EscolaGroupByOutputType = {
    id: number
    nome: string
    endereco: string
    contato: string
    createdAt: Date
    updatedAt: Date
    _count: EscolaCountAggregateOutputType | null
    _avg: EscolaAvgAggregateOutputType | null
    _sum: EscolaSumAggregateOutputType | null
    _min: EscolaMinAggregateOutputType | null
    _max: EscolaMaxAggregateOutputType | null
  }

  type GetEscolaGroupByPayload<T extends EscolaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EscolaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EscolaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EscolaGroupByOutputType[P]>
            : GetScalarType<T[P], EscolaGroupByOutputType[P]>
        }
      >
    >


  export type EscolaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    endereco?: boolean
    contato?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    turmas?: boolean | Escola$turmasArgs<ExtArgs>
    Aluno?: boolean | Escola$AlunoArgs<ExtArgs>
    _count?: boolean | EscolaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["escola"]>

  export type EscolaSelectScalar = {
    id?: boolean
    nome?: boolean
    endereco?: boolean
    contato?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EscolaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turmas?: boolean | Escola$turmasArgs<ExtArgs>
    Aluno?: boolean | Escola$AlunoArgs<ExtArgs>
    _count?: boolean | EscolaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EscolaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Escola"
    objects: {
      turmas: Prisma.$TurmaPayload<ExtArgs>[]
      Aluno: Prisma.$AlunoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      endereco: string
      contato: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["escola"]>
    composites: {}
  }


  type EscolaGetPayload<S extends boolean | null | undefined | EscolaDefaultArgs> = $Result.GetResult<Prisma.$EscolaPayload, S>

  type EscolaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EscolaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: EscolaCountAggregateInputType | true
    }

  export interface EscolaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Escola'], meta: { name: 'Escola' } }
    /**
     * Find zero or one Escola that matches the filter.
     * @param {EscolaFindUniqueArgs} args - Arguments to find a Escola
     * @example
     * // Get one Escola
     * const escola = await prisma.escola.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EscolaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EscolaFindUniqueArgs<ExtArgs>>
    ): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Escola that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EscolaFindUniqueOrThrowArgs} args - Arguments to find a Escola
     * @example
     * // Get one Escola
     * const escola = await prisma.escola.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EscolaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EscolaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Escola that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscolaFindFirstArgs} args - Arguments to find a Escola
     * @example
     * // Get one Escola
     * const escola = await prisma.escola.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EscolaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EscolaFindFirstArgs<ExtArgs>>
    ): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Escola that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscolaFindFirstOrThrowArgs} args - Arguments to find a Escola
     * @example
     * // Get one Escola
     * const escola = await prisma.escola.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EscolaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EscolaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Escolas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscolaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Escolas
     * const escolas = await prisma.escola.findMany()
     * 
     * // Get first 10 Escolas
     * const escolas = await prisma.escola.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const escolaWithIdOnly = await prisma.escola.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EscolaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EscolaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Escola.
     * @param {EscolaCreateArgs} args - Arguments to create a Escola.
     * @example
     * // Create one Escola
     * const Escola = await prisma.escola.create({
     *   data: {
     *     // ... data to create a Escola
     *   }
     * })
     * 
    **/
    create<T extends EscolaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EscolaCreateArgs<ExtArgs>>
    ): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Escola.
     * @param {EscolaDeleteArgs} args - Arguments to delete one Escola.
     * @example
     * // Delete one Escola
     * const Escola = await prisma.escola.delete({
     *   where: {
     *     // ... filter to delete one Escola
     *   }
     * })
     * 
    **/
    delete<T extends EscolaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EscolaDeleteArgs<ExtArgs>>
    ): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Escola.
     * @param {EscolaUpdateArgs} args - Arguments to update one Escola.
     * @example
     * // Update one Escola
     * const escola = await prisma.escola.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EscolaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EscolaUpdateArgs<ExtArgs>>
    ): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Escolas.
     * @param {EscolaDeleteManyArgs} args - Arguments to filter Escolas to delete.
     * @example
     * // Delete a few Escolas
     * const { count } = await prisma.escola.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EscolaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EscolaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Escolas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscolaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Escolas
     * const escola = await prisma.escola.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EscolaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EscolaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Escola.
     * @param {EscolaUpsertArgs} args - Arguments to update or create a Escola.
     * @example
     * // Update or create a Escola
     * const escola = await prisma.escola.upsert({
     *   create: {
     *     // ... data to create a Escola
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Escola we want to update
     *   }
     * })
    **/
    upsert<T extends EscolaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EscolaUpsertArgs<ExtArgs>>
    ): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Escolas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscolaCountArgs} args - Arguments to filter Escolas to count.
     * @example
     * // Count the number of Escolas
     * const count = await prisma.escola.count({
     *   where: {
     *     // ... the filter for the Escolas we want to count
     *   }
     * })
    **/
    count<T extends EscolaCountArgs>(
      args?: Subset<T, EscolaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EscolaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Escola.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscolaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EscolaAggregateArgs>(args: Subset<T, EscolaAggregateArgs>): Prisma.PrismaPromise<GetEscolaAggregateType<T>>

    /**
     * Group by Escola.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EscolaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EscolaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EscolaGroupByArgs['orderBy'] }
        : { orderBy?: EscolaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EscolaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEscolaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Escola model
   */
  readonly fields: EscolaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Escola.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EscolaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    turmas<T extends Escola$turmasArgs<ExtArgs> = {}>(args?: Subset<T, Escola$turmasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findMany'> | Null>;

    Aluno<T extends Escola$AlunoArgs<ExtArgs> = {}>(args?: Subset<T, Escola$AlunoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Escola model
   */ 
  interface EscolaFieldRefs {
    readonly id: FieldRef<"Escola", 'Int'>
    readonly nome: FieldRef<"Escola", 'String'>
    readonly endereco: FieldRef<"Escola", 'String'>
    readonly contato: FieldRef<"Escola", 'String'>
    readonly createdAt: FieldRef<"Escola", 'DateTime'>
    readonly updatedAt: FieldRef<"Escola", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Escola findUnique
   */
  export type EscolaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * Filter, which Escola to fetch.
     */
    where: EscolaWhereUniqueInput
  }


  /**
   * Escola findUniqueOrThrow
   */
  export type EscolaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * Filter, which Escola to fetch.
     */
    where: EscolaWhereUniqueInput
  }


  /**
   * Escola findFirst
   */
  export type EscolaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * Filter, which Escola to fetch.
     */
    where?: EscolaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Escolas to fetch.
     */
    orderBy?: EscolaOrderByWithRelationInput | EscolaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Escolas.
     */
    cursor?: EscolaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Escolas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Escolas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Escolas.
     */
    distinct?: EscolaScalarFieldEnum | EscolaScalarFieldEnum[]
  }


  /**
   * Escola findFirstOrThrow
   */
  export type EscolaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * Filter, which Escola to fetch.
     */
    where?: EscolaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Escolas to fetch.
     */
    orderBy?: EscolaOrderByWithRelationInput | EscolaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Escolas.
     */
    cursor?: EscolaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Escolas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Escolas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Escolas.
     */
    distinct?: EscolaScalarFieldEnum | EscolaScalarFieldEnum[]
  }


  /**
   * Escola findMany
   */
  export type EscolaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * Filter, which Escolas to fetch.
     */
    where?: EscolaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Escolas to fetch.
     */
    orderBy?: EscolaOrderByWithRelationInput | EscolaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Escolas.
     */
    cursor?: EscolaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Escolas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Escolas.
     */
    skip?: number
    distinct?: EscolaScalarFieldEnum | EscolaScalarFieldEnum[]
  }


  /**
   * Escola create
   */
  export type EscolaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * The data needed to create a Escola.
     */
    data: XOR<EscolaCreateInput, EscolaUncheckedCreateInput>
  }


  /**
   * Escola update
   */
  export type EscolaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * The data needed to update a Escola.
     */
    data: XOR<EscolaUpdateInput, EscolaUncheckedUpdateInput>
    /**
     * Choose, which Escola to update.
     */
    where: EscolaWhereUniqueInput
  }


  /**
   * Escola updateMany
   */
  export type EscolaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Escolas.
     */
    data: XOR<EscolaUpdateManyMutationInput, EscolaUncheckedUpdateManyInput>
    /**
     * Filter which Escolas to update
     */
    where?: EscolaWhereInput
  }


  /**
   * Escola upsert
   */
  export type EscolaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * The filter to search for the Escola to update in case it exists.
     */
    where: EscolaWhereUniqueInput
    /**
     * In case the Escola found by the `where` argument doesn't exist, create a new Escola with this data.
     */
    create: XOR<EscolaCreateInput, EscolaUncheckedCreateInput>
    /**
     * In case the Escola was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EscolaUpdateInput, EscolaUncheckedUpdateInput>
  }


  /**
   * Escola delete
   */
  export type EscolaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
    /**
     * Filter which Escola to delete.
     */
    where: EscolaWhereUniqueInput
  }


  /**
   * Escola deleteMany
   */
  export type EscolaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Escolas to delete
     */
    where?: EscolaWhereInput
  }


  /**
   * Escola.turmas
   */
  export type Escola$turmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    where?: TurmaWhereInput
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    cursor?: TurmaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }


  /**
   * Escola.Aluno
   */
  export type Escola$AlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    where?: AlunoWhereInput
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    cursor?: AlunoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }


  /**
   * Escola without action
   */
  export type EscolaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Escola
     */
    select?: EscolaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EscolaInclude<ExtArgs> | null
  }



  /**
   * Model Turma
   */

  export type AggregateTurma = {
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  export type TurmaAvgAggregateOutputType = {
    id: number | null
    ano: number | null
    materiaId: number | null
    escolaId: number | null
  }

  export type TurmaSumAggregateOutputType = {
    id: number | null
    ano: number | null
    materiaId: number | null
    escolaId: number | null
  }

  export type TurmaMinAggregateOutputType = {
    id: number | null
    ano: number | null
    materiaId: number | null
    escolaId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TurmaMaxAggregateOutputType = {
    id: number | null
    ano: number | null
    materiaId: number | null
    escolaId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TurmaCountAggregateOutputType = {
    id: number
    ano: number
    materiaId: number
    escolaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TurmaAvgAggregateInputType = {
    id?: true
    ano?: true
    materiaId?: true
    escolaId?: true
  }

  export type TurmaSumAggregateInputType = {
    id?: true
    ano?: true
    materiaId?: true
    escolaId?: true
  }

  export type TurmaMinAggregateInputType = {
    id?: true
    ano?: true
    materiaId?: true
    escolaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TurmaMaxAggregateInputType = {
    id?: true
    ano?: true
    materiaId?: true
    escolaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TurmaCountAggregateInputType = {
    id?: true
    ano?: true
    materiaId?: true
    escolaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TurmaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turma to aggregate.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Turmas
    **/
    _count?: true | TurmaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaMaxAggregateInputType
  }

  export type GetTurmaAggregateType<T extends TurmaAggregateArgs> = {
        [P in keyof T & keyof AggregateTurma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurma[P]>
      : GetScalarType<T[P], AggregateTurma[P]>
  }




  export type TurmaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaWhereInput
    orderBy?: TurmaOrderByWithAggregationInput | TurmaOrderByWithAggregationInput[]
    by: TurmaScalarFieldEnum[] | TurmaScalarFieldEnum
    having?: TurmaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaCountAggregateInputType | true
    _avg?: TurmaAvgAggregateInputType
    _sum?: TurmaSumAggregateInputType
    _min?: TurmaMinAggregateInputType
    _max?: TurmaMaxAggregateInputType
  }

  export type TurmaGroupByOutputType = {
    id: number
    ano: number
    materiaId: number
    escolaId: number
    createdAt: Date
    updatedAt: Date
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  type GetTurmaGroupByPayload<T extends TurmaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaGroupByOutputType[P]>
        }
      >
    >


  export type TurmaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ano?: boolean
    materiaId?: boolean
    escolaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    materia?: boolean | MateriaDefaultArgs<ExtArgs>
    escola?: boolean | EscolaDefaultArgs<ExtArgs>
    alunos?: boolean | Turma$alunosArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turma"]>

  export type TurmaSelectScalar = {
    id?: boolean
    ano?: boolean
    materiaId?: boolean
    escolaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TurmaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    materia?: boolean | MateriaDefaultArgs<ExtArgs>
    escola?: boolean | EscolaDefaultArgs<ExtArgs>
    alunos?: boolean | Turma$alunosArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TurmaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Turma"
    objects: {
      materia: Prisma.$MateriaPayload<ExtArgs>
      escola: Prisma.$EscolaPayload<ExtArgs>
      alunos: Prisma.$TurmaAlunoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ano: number
      materiaId: number
      escolaId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["turma"]>
    composites: {}
  }


  type TurmaGetPayload<S extends boolean | null | undefined | TurmaDefaultArgs> = $Result.GetResult<Prisma.$TurmaPayload, S>

  type TurmaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TurmaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TurmaCountAggregateInputType | true
    }

  export interface TurmaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Turma'], meta: { name: 'Turma' } }
    /**
     * Find zero or one Turma that matches the filter.
     * @param {TurmaFindUniqueArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TurmaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaFindUniqueArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Turma that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TurmaFindUniqueOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TurmaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Turma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TurmaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaFindFirstArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Turma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TurmaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turmas
     * const turmas = await prisma.turma.findMany()
     * 
     * // Get first 10 Turmas
     * const turmas = await prisma.turma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaWithIdOnly = await prisma.turma.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TurmaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Turma.
     * @param {TurmaCreateArgs} args - Arguments to create a Turma.
     * @example
     * // Create one Turma
     * const Turma = await prisma.turma.create({
     *   data: {
     *     // ... data to create a Turma
     *   }
     * })
     * 
    **/
    create<T extends TurmaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaCreateArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Turma.
     * @param {TurmaDeleteArgs} args - Arguments to delete one Turma.
     * @example
     * // Delete one Turma
     * const Turma = await prisma.turma.delete({
     *   where: {
     *     // ... filter to delete one Turma
     *   }
     * })
     * 
    **/
    delete<T extends TurmaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaDeleteArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Turma.
     * @param {TurmaUpdateArgs} args - Arguments to update one Turma.
     * @example
     * // Update one Turma
     * const turma = await prisma.turma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TurmaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaUpdateArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Turmas.
     * @param {TurmaDeleteManyArgs} args - Arguments to filter Turmas to delete.
     * @example
     * // Delete a few Turmas
     * const { count } = await prisma.turma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TurmaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turmas
     * const turma = await prisma.turma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TurmaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turma.
     * @param {TurmaUpsertArgs} args - Arguments to update or create a Turma.
     * @example
     * // Update or create a Turma
     * const turma = await prisma.turma.upsert({
     *   create: {
     *     // ... data to create a Turma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turma we want to update
     *   }
     * })
    **/
    upsert<T extends TurmaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaUpsertArgs<ExtArgs>>
    ): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaCountArgs} args - Arguments to filter Turmas to count.
     * @example
     * // Count the number of Turmas
     * const count = await prisma.turma.count({
     *   where: {
     *     // ... the filter for the Turmas we want to count
     *   }
     * })
    **/
    count<T extends TurmaCountArgs>(
      args?: Subset<T, TurmaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaAggregateArgs>(args: Subset<T, TurmaAggregateArgs>): Prisma.PrismaPromise<GetTurmaAggregateType<T>>

    /**
     * Group by Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmaGroupByArgs['orderBy'] }
        : { orderBy?: TurmaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Turma model
   */
  readonly fields: TurmaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Turma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurmaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    materia<T extends MateriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MateriaDefaultArgs<ExtArgs>>): Prisma__MateriaClient<$Result.GetResult<Prisma.$MateriaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    escola<T extends EscolaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EscolaDefaultArgs<ExtArgs>>): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    alunos<T extends Turma$alunosArgs<ExtArgs> = {}>(args?: Subset<T, Turma$alunosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Turma model
   */ 
  interface TurmaFieldRefs {
    readonly id: FieldRef<"Turma", 'Int'>
    readonly ano: FieldRef<"Turma", 'Int'>
    readonly materiaId: FieldRef<"Turma", 'Int'>
    readonly escolaId: FieldRef<"Turma", 'Int'>
    readonly createdAt: FieldRef<"Turma", 'DateTime'>
    readonly updatedAt: FieldRef<"Turma", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Turma findUnique
   */
  export type TurmaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma findUniqueOrThrow
   */
  export type TurmaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma findFirst
   */
  export type TurmaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }


  /**
   * Turma findFirstOrThrow
   */
  export type TurmaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }


  /**
   * Turma findMany
   */
  export type TurmaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turmas to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }


  /**
   * Turma create
   */
  export type TurmaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The data needed to create a Turma.
     */
    data: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
  }


  /**
   * Turma update
   */
  export type TurmaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The data needed to update a Turma.
     */
    data: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
    /**
     * Choose, which Turma to update.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma updateMany
   */
  export type TurmaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Turmas.
     */
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyInput>
    /**
     * Filter which Turmas to update
     */
    where?: TurmaWhereInput
  }


  /**
   * Turma upsert
   */
  export type TurmaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The filter to search for the Turma to update in case it exists.
     */
    where: TurmaWhereUniqueInput
    /**
     * In case the Turma found by the `where` argument doesn't exist, create a new Turma with this data.
     */
    create: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
    /**
     * In case the Turma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
  }


  /**
   * Turma delete
   */
  export type TurmaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter which Turma to delete.
     */
    where: TurmaWhereUniqueInput
  }


  /**
   * Turma deleteMany
   */
  export type TurmaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turmas to delete
     */
    where?: TurmaWhereInput
  }


  /**
   * Turma.alunos
   */
  export type Turma$alunosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    where?: TurmaAlunoWhereInput
    orderBy?: TurmaAlunoOrderByWithRelationInput | TurmaAlunoOrderByWithRelationInput[]
    cursor?: TurmaAlunoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaAlunoScalarFieldEnum | TurmaAlunoScalarFieldEnum[]
  }


  /**
   * Turma without action
   */
  export type TurmaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaInclude<ExtArgs> | null
  }



  /**
   * Model Aluno
   */

  export type AggregateAluno = {
    _count: AlunoCountAggregateOutputType | null
    _avg: AlunoAvgAggregateOutputType | null
    _sum: AlunoSumAggregateOutputType | null
    _min: AlunoMinAggregateOutputType | null
    _max: AlunoMaxAggregateOutputType | null
  }

  export type AlunoAvgAggregateOutputType = {
    id: number | null
    escolaId: number | null
  }

  export type AlunoSumAggregateOutputType = {
    id: number | null
    escolaId: number | null
  }

  export type AlunoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    escolaId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlunoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    escolaId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlunoCountAggregateOutputType = {
    id: number
    nome: number
    escolaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlunoAvgAggregateInputType = {
    id?: true
    escolaId?: true
  }

  export type AlunoSumAggregateInputType = {
    id?: true
    escolaId?: true
  }

  export type AlunoMinAggregateInputType = {
    id?: true
    nome?: true
    escolaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlunoMaxAggregateInputType = {
    id?: true
    nome?: true
    escolaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlunoCountAggregateInputType = {
    id?: true
    nome?: true
    escolaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlunoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aluno to aggregate.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alunos
    **/
    _count?: true | AlunoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlunoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlunoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlunoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlunoMaxAggregateInputType
  }

  export type GetAlunoAggregateType<T extends AlunoAggregateArgs> = {
        [P in keyof T & keyof AggregateAluno]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAluno[P]>
      : GetScalarType<T[P], AggregateAluno[P]>
  }




  export type AlunoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlunoWhereInput
    orderBy?: AlunoOrderByWithAggregationInput | AlunoOrderByWithAggregationInput[]
    by: AlunoScalarFieldEnum[] | AlunoScalarFieldEnum
    having?: AlunoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlunoCountAggregateInputType | true
    _avg?: AlunoAvgAggregateInputType
    _sum?: AlunoSumAggregateInputType
    _min?: AlunoMinAggregateInputType
    _max?: AlunoMaxAggregateInputType
  }

  export type AlunoGroupByOutputType = {
    id: number
    nome: string
    escolaId: number
    createdAt: Date
    updatedAt: Date
    _count: AlunoCountAggregateOutputType | null
    _avg: AlunoAvgAggregateOutputType | null
    _sum: AlunoSumAggregateOutputType | null
    _min: AlunoMinAggregateOutputType | null
    _max: AlunoMaxAggregateOutputType | null
  }

  type GetAlunoGroupByPayload<T extends AlunoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlunoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlunoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlunoGroupByOutputType[P]>
            : GetScalarType<T[P], AlunoGroupByOutputType[P]>
        }
      >
    >


  export type AlunoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    escolaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    escola?: boolean | EscolaDefaultArgs<ExtArgs>
    notas?: boolean | Aluno$notasArgs<ExtArgs>
    turmas?: boolean | Aluno$turmasArgs<ExtArgs>
    _count?: boolean | AlunoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aluno"]>

  export type AlunoSelectScalar = {
    id?: boolean
    nome?: boolean
    escolaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AlunoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    escola?: boolean | EscolaDefaultArgs<ExtArgs>
    notas?: boolean | Aluno$notasArgs<ExtArgs>
    turmas?: boolean | Aluno$turmasArgs<ExtArgs>
    _count?: boolean | AlunoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AlunoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Aluno"
    objects: {
      escola: Prisma.$EscolaPayload<ExtArgs>
      notas: Prisma.$NotaPayload<ExtArgs>[]
      turmas: Prisma.$TurmaAlunoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      escolaId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["aluno"]>
    composites: {}
  }


  type AlunoGetPayload<S extends boolean | null | undefined | AlunoDefaultArgs> = $Result.GetResult<Prisma.$AlunoPayload, S>

  type AlunoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlunoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AlunoCountAggregateInputType | true
    }

  export interface AlunoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aluno'], meta: { name: 'Aluno' } }
    /**
     * Find zero or one Aluno that matches the filter.
     * @param {AlunoFindUniqueArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlunoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoFindUniqueArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Aluno that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlunoFindUniqueOrThrowArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlunoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Aluno that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindFirstArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlunoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoFindFirstArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Aluno that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindFirstOrThrowArgs} args - Arguments to find a Aluno
     * @example
     * // Get one Aluno
     * const aluno = await prisma.aluno.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlunoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Alunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alunos
     * const alunos = await prisma.aluno.findMany()
     * 
     * // Get first 10 Alunos
     * const alunos = await prisma.aluno.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alunoWithIdOnly = await prisma.aluno.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AlunoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Aluno.
     * @param {AlunoCreateArgs} args - Arguments to create a Aluno.
     * @example
     * // Create one Aluno
     * const Aluno = await prisma.aluno.create({
     *   data: {
     *     // ... data to create a Aluno
     *   }
     * })
     * 
    **/
    create<T extends AlunoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoCreateArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Aluno.
     * @param {AlunoDeleteArgs} args - Arguments to delete one Aluno.
     * @example
     * // Delete one Aluno
     * const Aluno = await prisma.aluno.delete({
     *   where: {
     *     // ... filter to delete one Aluno
     *   }
     * })
     * 
    **/
    delete<T extends AlunoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoDeleteArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Aluno.
     * @param {AlunoUpdateArgs} args - Arguments to update one Aluno.
     * @example
     * // Update one Aluno
     * const aluno = await prisma.aluno.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlunoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoUpdateArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Alunos.
     * @param {AlunoDeleteManyArgs} args - Arguments to filter Alunos to delete.
     * @example
     * // Delete a few Alunos
     * const { count } = await prisma.aluno.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlunoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlunoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alunos
     * const aluno = await prisma.aluno.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlunoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Aluno.
     * @param {AlunoUpsertArgs} args - Arguments to update or create a Aluno.
     * @example
     * // Update or create a Aluno
     * const aluno = await prisma.aluno.upsert({
     *   create: {
     *     // ... data to create a Aluno
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Aluno we want to update
     *   }
     * })
    **/
    upsert<T extends AlunoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AlunoUpsertArgs<ExtArgs>>
    ): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Alunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoCountArgs} args - Arguments to filter Alunos to count.
     * @example
     * // Count the number of Alunos
     * const count = await prisma.aluno.count({
     *   where: {
     *     // ... the filter for the Alunos we want to count
     *   }
     * })
    **/
    count<T extends AlunoCountArgs>(
      args?: Subset<T, AlunoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlunoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Aluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlunoAggregateArgs>(args: Subset<T, AlunoAggregateArgs>): Prisma.PrismaPromise<GetAlunoAggregateType<T>>

    /**
     * Group by Aluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlunoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlunoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlunoGroupByArgs['orderBy'] }
        : { orderBy?: AlunoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlunoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlunoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Aluno model
   */
  readonly fields: AlunoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Aluno.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlunoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    escola<T extends EscolaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EscolaDefaultArgs<ExtArgs>>): Prisma__EscolaClient<$Result.GetResult<Prisma.$EscolaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    notas<T extends Aluno$notasArgs<ExtArgs> = {}>(args?: Subset<T, Aluno$notasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'findMany'> | Null>;

    turmas<T extends Aluno$turmasArgs<ExtArgs> = {}>(args?: Subset<T, Aluno$turmasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Aluno model
   */ 
  interface AlunoFieldRefs {
    readonly id: FieldRef<"Aluno", 'Int'>
    readonly nome: FieldRef<"Aluno", 'String'>
    readonly escolaId: FieldRef<"Aluno", 'Int'>
    readonly createdAt: FieldRef<"Aluno", 'DateTime'>
    readonly updatedAt: FieldRef<"Aluno", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Aluno findUnique
   */
  export type AlunoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where: AlunoWhereUniqueInput
  }


  /**
   * Aluno findUniqueOrThrow
   */
  export type AlunoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where: AlunoWhereUniqueInput
  }


  /**
   * Aluno findFirst
   */
  export type AlunoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alunos.
     */
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }


  /**
   * Aluno findFirstOrThrow
   */
  export type AlunoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Aluno to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alunos.
     */
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }


  /**
   * Aluno findMany
   */
  export type AlunoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter, which Alunos to fetch.
     */
    where?: AlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alunos to fetch.
     */
    orderBy?: AlunoOrderByWithRelationInput | AlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alunos.
     */
    cursor?: AlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alunos.
     */
    skip?: number
    distinct?: AlunoScalarFieldEnum | AlunoScalarFieldEnum[]
  }


  /**
   * Aluno create
   */
  export type AlunoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The data needed to create a Aluno.
     */
    data: XOR<AlunoCreateInput, AlunoUncheckedCreateInput>
  }


  /**
   * Aluno update
   */
  export type AlunoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The data needed to update a Aluno.
     */
    data: XOR<AlunoUpdateInput, AlunoUncheckedUpdateInput>
    /**
     * Choose, which Aluno to update.
     */
    where: AlunoWhereUniqueInput
  }


  /**
   * Aluno updateMany
   */
  export type AlunoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alunos.
     */
    data: XOR<AlunoUpdateManyMutationInput, AlunoUncheckedUpdateManyInput>
    /**
     * Filter which Alunos to update
     */
    where?: AlunoWhereInput
  }


  /**
   * Aluno upsert
   */
  export type AlunoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * The filter to search for the Aluno to update in case it exists.
     */
    where: AlunoWhereUniqueInput
    /**
     * In case the Aluno found by the `where` argument doesn't exist, create a new Aluno with this data.
     */
    create: XOR<AlunoCreateInput, AlunoUncheckedCreateInput>
    /**
     * In case the Aluno was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlunoUpdateInput, AlunoUncheckedUpdateInput>
  }


  /**
   * Aluno delete
   */
  export type AlunoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    /**
     * Filter which Aluno to delete.
     */
    where: AlunoWhereUniqueInput
  }


  /**
   * Aluno deleteMany
   */
  export type AlunoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alunos to delete
     */
    where?: AlunoWhereInput
  }


  /**
   * Aluno.notas
   */
  export type Aluno$notasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    where?: NotaWhereInput
    orderBy?: NotaOrderByWithRelationInput | NotaOrderByWithRelationInput[]
    cursor?: NotaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotaScalarFieldEnum | NotaScalarFieldEnum[]
  }


  /**
   * Aluno.turmas
   */
  export type Aluno$turmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    where?: TurmaAlunoWhereInput
    orderBy?: TurmaAlunoOrderByWithRelationInput | TurmaAlunoOrderByWithRelationInput[]
    cursor?: TurmaAlunoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaAlunoScalarFieldEnum | TurmaAlunoScalarFieldEnum[]
  }


  /**
   * Aluno without action
   */
  export type AlunoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
  }



  /**
   * Model TurmaAluno
   */

  export type AggregateTurmaAluno = {
    _count: TurmaAlunoCountAggregateOutputType | null
    _avg: TurmaAlunoAvgAggregateOutputType | null
    _sum: TurmaAlunoSumAggregateOutputType | null
    _min: TurmaAlunoMinAggregateOutputType | null
    _max: TurmaAlunoMaxAggregateOutputType | null
  }

  export type TurmaAlunoAvgAggregateOutputType = {
    id: number | null
    alunoId: number | null
    turmaId: number | null
  }

  export type TurmaAlunoSumAggregateOutputType = {
    id: number | null
    alunoId: number | null
    turmaId: number | null
  }

  export type TurmaAlunoMinAggregateOutputType = {
    id: number | null
    alunoId: number | null
    turmaId: number | null
  }

  export type TurmaAlunoMaxAggregateOutputType = {
    id: number | null
    alunoId: number | null
    turmaId: number | null
  }

  export type TurmaAlunoCountAggregateOutputType = {
    id: number
    alunoId: number
    turmaId: number
    _all: number
  }


  export type TurmaAlunoAvgAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
  }

  export type TurmaAlunoSumAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
  }

  export type TurmaAlunoMinAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
  }

  export type TurmaAlunoMaxAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
  }

  export type TurmaAlunoCountAggregateInputType = {
    id?: true
    alunoId?: true
    turmaId?: true
    _all?: true
  }

  export type TurmaAlunoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TurmaAluno to aggregate.
     */
    where?: TurmaAlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaAlunos to fetch.
     */
    orderBy?: TurmaAlunoOrderByWithRelationInput | TurmaAlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurmaAlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TurmaAlunos
    **/
    _count?: true | TurmaAlunoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaAlunoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaAlunoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaAlunoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaAlunoMaxAggregateInputType
  }

  export type GetTurmaAlunoAggregateType<T extends TurmaAlunoAggregateArgs> = {
        [P in keyof T & keyof AggregateTurmaAluno]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurmaAluno[P]>
      : GetScalarType<T[P], AggregateTurmaAluno[P]>
  }




  export type TurmaAlunoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaAlunoWhereInput
    orderBy?: TurmaAlunoOrderByWithAggregationInput | TurmaAlunoOrderByWithAggregationInput[]
    by: TurmaAlunoScalarFieldEnum[] | TurmaAlunoScalarFieldEnum
    having?: TurmaAlunoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaAlunoCountAggregateInputType | true
    _avg?: TurmaAlunoAvgAggregateInputType
    _sum?: TurmaAlunoSumAggregateInputType
    _min?: TurmaAlunoMinAggregateInputType
    _max?: TurmaAlunoMaxAggregateInputType
  }

  export type TurmaAlunoGroupByOutputType = {
    id: number
    alunoId: number
    turmaId: number
    _count: TurmaAlunoCountAggregateOutputType | null
    _avg: TurmaAlunoAvgAggregateOutputType | null
    _sum: TurmaAlunoSumAggregateOutputType | null
    _min: TurmaAlunoMinAggregateOutputType | null
    _max: TurmaAlunoMaxAggregateOutputType | null
  }

  type GetTurmaAlunoGroupByPayload<T extends TurmaAlunoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmaAlunoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaAlunoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaAlunoGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaAlunoGroupByOutputType[P]>
        }
      >
    >


  export type TurmaAlunoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    alunoId?: boolean
    turmaId?: boolean
    aluno?: boolean | AlunoDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
    notas?: boolean | TurmaAluno$notasArgs<ExtArgs>
    _count?: boolean | TurmaAlunoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turmaAluno"]>

  export type TurmaAlunoSelectScalar = {
    id?: boolean
    alunoId?: boolean
    turmaId?: boolean
  }

  export type TurmaAlunoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    aluno?: boolean | AlunoDefaultArgs<ExtArgs>
    turma?: boolean | TurmaDefaultArgs<ExtArgs>
    notas?: boolean | TurmaAluno$notasArgs<ExtArgs>
    _count?: boolean | TurmaAlunoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TurmaAlunoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TurmaAluno"
    objects: {
      aluno: Prisma.$AlunoPayload<ExtArgs>
      turma: Prisma.$TurmaPayload<ExtArgs>
      notas: Prisma.$NotaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      alunoId: number
      turmaId: number
    }, ExtArgs["result"]["turmaAluno"]>
    composites: {}
  }


  type TurmaAlunoGetPayload<S extends boolean | null | undefined | TurmaAlunoDefaultArgs> = $Result.GetResult<Prisma.$TurmaAlunoPayload, S>

  type TurmaAlunoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TurmaAlunoFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TurmaAlunoCountAggregateInputType | true
    }

  export interface TurmaAlunoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TurmaAluno'], meta: { name: 'TurmaAluno' } }
    /**
     * Find zero or one TurmaAluno that matches the filter.
     * @param {TurmaAlunoFindUniqueArgs} args - Arguments to find a TurmaAluno
     * @example
     * // Get one TurmaAluno
     * const turmaAluno = await prisma.turmaAluno.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TurmaAlunoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaAlunoFindUniqueArgs<ExtArgs>>
    ): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TurmaAluno that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TurmaAlunoFindUniqueOrThrowArgs} args - Arguments to find a TurmaAluno
     * @example
     * // Get one TurmaAluno
     * const turmaAluno = await prisma.turmaAluno.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TurmaAlunoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaAlunoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TurmaAluno that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunoFindFirstArgs} args - Arguments to find a TurmaAluno
     * @example
     * // Get one TurmaAluno
     * const turmaAluno = await prisma.turmaAluno.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TurmaAlunoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaAlunoFindFirstArgs<ExtArgs>>
    ): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TurmaAluno that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunoFindFirstOrThrowArgs} args - Arguments to find a TurmaAluno
     * @example
     * // Get one TurmaAluno
     * const turmaAluno = await prisma.turmaAluno.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TurmaAlunoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaAlunoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TurmaAlunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TurmaAlunos
     * const turmaAlunos = await prisma.turmaAluno.findMany()
     * 
     * // Get first 10 TurmaAlunos
     * const turmaAlunos = await prisma.turmaAluno.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaAlunoWithIdOnly = await prisma.turmaAluno.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TurmaAlunoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaAlunoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TurmaAluno.
     * @param {TurmaAlunoCreateArgs} args - Arguments to create a TurmaAluno.
     * @example
     * // Create one TurmaAluno
     * const TurmaAluno = await prisma.turmaAluno.create({
     *   data: {
     *     // ... data to create a TurmaAluno
     *   }
     * })
     * 
    **/
    create<T extends TurmaAlunoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaAlunoCreateArgs<ExtArgs>>
    ): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a TurmaAluno.
     * @param {TurmaAlunoDeleteArgs} args - Arguments to delete one TurmaAluno.
     * @example
     * // Delete one TurmaAluno
     * const TurmaAluno = await prisma.turmaAluno.delete({
     *   where: {
     *     // ... filter to delete one TurmaAluno
     *   }
     * })
     * 
    **/
    delete<T extends TurmaAlunoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaAlunoDeleteArgs<ExtArgs>>
    ): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TurmaAluno.
     * @param {TurmaAlunoUpdateArgs} args - Arguments to update one TurmaAluno.
     * @example
     * // Update one TurmaAluno
     * const turmaAluno = await prisma.turmaAluno.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TurmaAlunoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaAlunoUpdateArgs<ExtArgs>>
    ): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TurmaAlunos.
     * @param {TurmaAlunoDeleteManyArgs} args - Arguments to filter TurmaAlunos to delete.
     * @example
     * // Delete a few TurmaAlunos
     * const { count } = await prisma.turmaAluno.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TurmaAlunoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurmaAlunoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TurmaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TurmaAlunos
     * const turmaAluno = await prisma.turmaAluno.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TurmaAlunoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaAlunoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TurmaAluno.
     * @param {TurmaAlunoUpsertArgs} args - Arguments to update or create a TurmaAluno.
     * @example
     * // Update or create a TurmaAluno
     * const turmaAluno = await prisma.turmaAluno.upsert({
     *   create: {
     *     // ... data to create a TurmaAluno
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TurmaAluno we want to update
     *   }
     * })
    **/
    upsert<T extends TurmaAlunoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TurmaAlunoUpsertArgs<ExtArgs>>
    ): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TurmaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunoCountArgs} args - Arguments to filter TurmaAlunos to count.
     * @example
     * // Count the number of TurmaAlunos
     * const count = await prisma.turmaAluno.count({
     *   where: {
     *     // ... the filter for the TurmaAlunos we want to count
     *   }
     * })
    **/
    count<T extends TurmaAlunoCountArgs>(
      args?: Subset<T, TurmaAlunoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaAlunoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TurmaAluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaAlunoAggregateArgs>(args: Subset<T, TurmaAlunoAggregateArgs>): Prisma.PrismaPromise<GetTurmaAlunoAggregateType<T>>

    /**
     * Group by TurmaAluno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmaAlunoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmaAlunoGroupByArgs['orderBy'] }
        : { orderBy?: TurmaAlunoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmaAlunoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaAlunoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TurmaAluno model
   */
  readonly fields: TurmaAlunoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TurmaAluno.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurmaAlunoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    aluno<T extends AlunoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlunoDefaultArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    turma<T extends TurmaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TurmaDefaultArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    notas<T extends TurmaAluno$notasArgs<ExtArgs> = {}>(args?: Subset<T, TurmaAluno$notasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TurmaAluno model
   */ 
  interface TurmaAlunoFieldRefs {
    readonly id: FieldRef<"TurmaAluno", 'Int'>
    readonly alunoId: FieldRef<"TurmaAluno", 'Int'>
    readonly turmaId: FieldRef<"TurmaAluno", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * TurmaAluno findUnique
   */
  export type TurmaAlunoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAluno to fetch.
     */
    where: TurmaAlunoWhereUniqueInput
  }


  /**
   * TurmaAluno findUniqueOrThrow
   */
  export type TurmaAlunoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAluno to fetch.
     */
    where: TurmaAlunoWhereUniqueInput
  }


  /**
   * TurmaAluno findFirst
   */
  export type TurmaAlunoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAluno to fetch.
     */
    where?: TurmaAlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaAlunos to fetch.
     */
    orderBy?: TurmaAlunoOrderByWithRelationInput | TurmaAlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TurmaAlunos.
     */
    cursor?: TurmaAlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TurmaAlunos.
     */
    distinct?: TurmaAlunoScalarFieldEnum | TurmaAlunoScalarFieldEnum[]
  }


  /**
   * TurmaAluno findFirstOrThrow
   */
  export type TurmaAlunoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAluno to fetch.
     */
    where?: TurmaAlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaAlunos to fetch.
     */
    orderBy?: TurmaAlunoOrderByWithRelationInput | TurmaAlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TurmaAlunos.
     */
    cursor?: TurmaAlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TurmaAlunos.
     */
    distinct?: TurmaAlunoScalarFieldEnum | TurmaAlunoScalarFieldEnum[]
  }


  /**
   * TurmaAluno findMany
   */
  export type TurmaAlunoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAlunos to fetch.
     */
    where?: TurmaAlunoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaAlunos to fetch.
     */
    orderBy?: TurmaAlunoOrderByWithRelationInput | TurmaAlunoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TurmaAlunos.
     */
    cursor?: TurmaAlunoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaAlunos.
     */
    skip?: number
    distinct?: TurmaAlunoScalarFieldEnum | TurmaAlunoScalarFieldEnum[]
  }


  /**
   * TurmaAluno create
   */
  export type TurmaAlunoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * The data needed to create a TurmaAluno.
     */
    data: XOR<TurmaAlunoCreateInput, TurmaAlunoUncheckedCreateInput>
  }


  /**
   * TurmaAluno update
   */
  export type TurmaAlunoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * The data needed to update a TurmaAluno.
     */
    data: XOR<TurmaAlunoUpdateInput, TurmaAlunoUncheckedUpdateInput>
    /**
     * Choose, which TurmaAluno to update.
     */
    where: TurmaAlunoWhereUniqueInput
  }


  /**
   * TurmaAluno updateMany
   */
  export type TurmaAlunoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TurmaAlunos.
     */
    data: XOR<TurmaAlunoUpdateManyMutationInput, TurmaAlunoUncheckedUpdateManyInput>
    /**
     * Filter which TurmaAlunos to update
     */
    where?: TurmaAlunoWhereInput
  }


  /**
   * TurmaAluno upsert
   */
  export type TurmaAlunoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * The filter to search for the TurmaAluno to update in case it exists.
     */
    where: TurmaAlunoWhereUniqueInput
    /**
     * In case the TurmaAluno found by the `where` argument doesn't exist, create a new TurmaAluno with this data.
     */
    create: XOR<TurmaAlunoCreateInput, TurmaAlunoUncheckedCreateInput>
    /**
     * In case the TurmaAluno was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurmaAlunoUpdateInput, TurmaAlunoUncheckedUpdateInput>
  }


  /**
   * TurmaAluno delete
   */
  export type TurmaAlunoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
    /**
     * Filter which TurmaAluno to delete.
     */
    where: TurmaAlunoWhereUniqueInput
  }


  /**
   * TurmaAluno deleteMany
   */
  export type TurmaAlunoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TurmaAlunos to delete
     */
    where?: TurmaAlunoWhereInput
  }


  /**
   * TurmaAluno.notas
   */
  export type TurmaAluno$notasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    where?: NotaWhereInput
    orderBy?: NotaOrderByWithRelationInput | NotaOrderByWithRelationInput[]
    cursor?: NotaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotaScalarFieldEnum | NotaScalarFieldEnum[]
  }


  /**
   * TurmaAluno without action
   */
  export type TurmaAlunoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAluno
     */
    select?: TurmaAlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurmaAlunoInclude<ExtArgs> | null
  }



  /**
   * Model Nota
   */

  export type AggregateNota = {
    _count: NotaCountAggregateOutputType | null
    _avg: NotaAvgAggregateOutputType | null
    _sum: NotaSumAggregateOutputType | null
    _min: NotaMinAggregateOutputType | null
    _max: NotaMaxAggregateOutputType | null
  }

  export type NotaAvgAggregateOutputType = {
    id: number | null
    valor: number | null
    bimestre: number | null
    turmaAlunoId: number | null
    alunoId: number | null
  }

  export type NotaSumAggregateOutputType = {
    id: number | null
    valor: number | null
    bimestre: number | null
    turmaAlunoId: number | null
    alunoId: number | null
  }

  export type NotaMinAggregateOutputType = {
    id: number | null
    valor: number | null
    bimestre: number | null
    turmaAlunoId: number | null
    alunoId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotaMaxAggregateOutputType = {
    id: number | null
    valor: number | null
    bimestre: number | null
    turmaAlunoId: number | null
    alunoId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotaCountAggregateOutputType = {
    id: number
    valor: number
    bimestre: number
    turmaAlunoId: number
    alunoId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotaAvgAggregateInputType = {
    id?: true
    valor?: true
    bimestre?: true
    turmaAlunoId?: true
    alunoId?: true
  }

  export type NotaSumAggregateInputType = {
    id?: true
    valor?: true
    bimestre?: true
    turmaAlunoId?: true
    alunoId?: true
  }

  export type NotaMinAggregateInputType = {
    id?: true
    valor?: true
    bimestre?: true
    turmaAlunoId?: true
    alunoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotaMaxAggregateInputType = {
    id?: true
    valor?: true
    bimestre?: true
    turmaAlunoId?: true
    alunoId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotaCountAggregateInputType = {
    id?: true
    valor?: true
    bimestre?: true
    turmaAlunoId?: true
    alunoId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nota to aggregate.
     */
    where?: NotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notas to fetch.
     */
    orderBy?: NotaOrderByWithRelationInput | NotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notas
    **/
    _count?: true | NotaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotaMaxAggregateInputType
  }

  export type GetNotaAggregateType<T extends NotaAggregateArgs> = {
        [P in keyof T & keyof AggregateNota]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNota[P]>
      : GetScalarType<T[P], AggregateNota[P]>
  }




  export type NotaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotaWhereInput
    orderBy?: NotaOrderByWithAggregationInput | NotaOrderByWithAggregationInput[]
    by: NotaScalarFieldEnum[] | NotaScalarFieldEnum
    having?: NotaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotaCountAggregateInputType | true
    _avg?: NotaAvgAggregateInputType
    _sum?: NotaSumAggregateInputType
    _min?: NotaMinAggregateInputType
    _max?: NotaMaxAggregateInputType
  }

  export type NotaGroupByOutputType = {
    id: number
    valor: number
    bimestre: number
    turmaAlunoId: number
    alunoId: number | null
    createdAt: Date
    updatedAt: Date
    _count: NotaCountAggregateOutputType | null
    _avg: NotaAvgAggregateOutputType | null
    _sum: NotaSumAggregateOutputType | null
    _min: NotaMinAggregateOutputType | null
    _max: NotaMaxAggregateOutputType | null
  }

  type GetNotaGroupByPayload<T extends NotaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotaGroupByOutputType[P]>
            : GetScalarType<T[P], NotaGroupByOutputType[P]>
        }
      >
    >


  export type NotaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    valor?: boolean
    bimestre?: boolean
    turmaAlunoId?: boolean
    alunoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    turmaAluno?: boolean | TurmaAlunoDefaultArgs<ExtArgs>
    Aluno?: boolean | Nota$AlunoArgs<ExtArgs>
  }, ExtArgs["result"]["nota"]>

  export type NotaSelectScalar = {
    id?: boolean
    valor?: boolean
    bimestre?: boolean
    turmaAlunoId?: boolean
    alunoId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turmaAluno?: boolean | TurmaAlunoDefaultArgs<ExtArgs>
    Aluno?: boolean | Nota$AlunoArgs<ExtArgs>
  }


  export type $NotaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nota"
    objects: {
      turmaAluno: Prisma.$TurmaAlunoPayload<ExtArgs>
      Aluno: Prisma.$AlunoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      valor: number
      bimestre: number
      turmaAlunoId: number
      alunoId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["nota"]>
    composites: {}
  }


  type NotaGetPayload<S extends boolean | null | undefined | NotaDefaultArgs> = $Result.GetResult<Prisma.$NotaPayload, S>

  type NotaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: NotaCountAggregateInputType | true
    }

  export interface NotaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nota'], meta: { name: 'Nota' } }
    /**
     * Find zero or one Nota that matches the filter.
     * @param {NotaFindUniqueArgs} args - Arguments to find a Nota
     * @example
     * // Get one Nota
     * const nota = await prisma.nota.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotaFindUniqueArgs<ExtArgs>>
    ): Prisma__NotaClient<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Nota that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotaFindUniqueOrThrowArgs} args - Arguments to find a Nota
     * @example
     * // Get one Nota
     * const nota = await prisma.nota.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotaClient<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Nota that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotaFindFirstArgs} args - Arguments to find a Nota
     * @example
     * // Get one Nota
     * const nota = await prisma.nota.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotaFindFirstArgs<ExtArgs>>
    ): Prisma__NotaClient<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Nota that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotaFindFirstOrThrowArgs} args - Arguments to find a Nota
     * @example
     * // Get one Nota
     * const nota = await prisma.nota.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotaClient<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notas
     * const notas = await prisma.nota.findMany()
     * 
     * // Get first 10 Notas
     * const notas = await prisma.nota.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notaWithIdOnly = await prisma.nota.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Nota.
     * @param {NotaCreateArgs} args - Arguments to create a Nota.
     * @example
     * // Create one Nota
     * const Nota = await prisma.nota.create({
     *   data: {
     *     // ... data to create a Nota
     *   }
     * })
     * 
    **/
    create<T extends NotaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotaCreateArgs<ExtArgs>>
    ): Prisma__NotaClient<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Nota.
     * @param {NotaDeleteArgs} args - Arguments to delete one Nota.
     * @example
     * // Delete one Nota
     * const Nota = await prisma.nota.delete({
     *   where: {
     *     // ... filter to delete one Nota
     *   }
     * })
     * 
    **/
    delete<T extends NotaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotaDeleteArgs<ExtArgs>>
    ): Prisma__NotaClient<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Nota.
     * @param {NotaUpdateArgs} args - Arguments to update one Nota.
     * @example
     * // Update one Nota
     * const nota = await prisma.nota.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotaUpdateArgs<ExtArgs>>
    ): Prisma__NotaClient<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notas.
     * @param {NotaDeleteManyArgs} args - Arguments to filter Notas to delete.
     * @example
     * // Delete a few Notas
     * const { count } = await prisma.nota.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notas
     * const nota = await prisma.nota.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nota.
     * @param {NotaUpsertArgs} args - Arguments to update or create a Nota.
     * @example
     * // Update or create a Nota
     * const nota = await prisma.nota.upsert({
     *   create: {
     *     // ... data to create a Nota
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nota we want to update
     *   }
     * })
    **/
    upsert<T extends NotaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotaUpsertArgs<ExtArgs>>
    ): Prisma__NotaClient<$Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotaCountArgs} args - Arguments to filter Notas to count.
     * @example
     * // Count the number of Notas
     * const count = await prisma.nota.count({
     *   where: {
     *     // ... the filter for the Notas we want to count
     *   }
     * })
    **/
    count<T extends NotaCountArgs>(
      args?: Subset<T, NotaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotaAggregateArgs>(args: Subset<T, NotaAggregateArgs>): Prisma.PrismaPromise<GetNotaAggregateType<T>>

    /**
     * Group by Nota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotaGroupByArgs['orderBy'] }
        : { orderBy?: NotaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nota model
   */
  readonly fields: NotaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nota.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    turmaAluno<T extends TurmaAlunoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TurmaAlunoDefaultArgs<ExtArgs>>): Prisma__TurmaAlunoClient<$Result.GetResult<Prisma.$TurmaAlunoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Aluno<T extends Nota$AlunoArgs<ExtArgs> = {}>(args?: Subset<T, Nota$AlunoArgs<ExtArgs>>): Prisma__AlunoClient<$Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Nota model
   */ 
  interface NotaFieldRefs {
    readonly id: FieldRef<"Nota", 'Int'>
    readonly valor: FieldRef<"Nota", 'Int'>
    readonly bimestre: FieldRef<"Nota", 'Int'>
    readonly turmaAlunoId: FieldRef<"Nota", 'Int'>
    readonly alunoId: FieldRef<"Nota", 'Int'>
    readonly createdAt: FieldRef<"Nota", 'DateTime'>
    readonly updatedAt: FieldRef<"Nota", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Nota findUnique
   */
  export type NotaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * Filter, which Nota to fetch.
     */
    where: NotaWhereUniqueInput
  }


  /**
   * Nota findUniqueOrThrow
   */
  export type NotaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * Filter, which Nota to fetch.
     */
    where: NotaWhereUniqueInput
  }


  /**
   * Nota findFirst
   */
  export type NotaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * Filter, which Nota to fetch.
     */
    where?: NotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notas to fetch.
     */
    orderBy?: NotaOrderByWithRelationInput | NotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notas.
     */
    cursor?: NotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notas.
     */
    distinct?: NotaScalarFieldEnum | NotaScalarFieldEnum[]
  }


  /**
   * Nota findFirstOrThrow
   */
  export type NotaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * Filter, which Nota to fetch.
     */
    where?: NotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notas to fetch.
     */
    orderBy?: NotaOrderByWithRelationInput | NotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notas.
     */
    cursor?: NotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notas.
     */
    distinct?: NotaScalarFieldEnum | NotaScalarFieldEnum[]
  }


  /**
   * Nota findMany
   */
  export type NotaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * Filter, which Notas to fetch.
     */
    where?: NotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notas to fetch.
     */
    orderBy?: NotaOrderByWithRelationInput | NotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notas.
     */
    cursor?: NotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notas.
     */
    skip?: number
    distinct?: NotaScalarFieldEnum | NotaScalarFieldEnum[]
  }


  /**
   * Nota create
   */
  export type NotaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * The data needed to create a Nota.
     */
    data: XOR<NotaCreateInput, NotaUncheckedCreateInput>
  }


  /**
   * Nota update
   */
  export type NotaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * The data needed to update a Nota.
     */
    data: XOR<NotaUpdateInput, NotaUncheckedUpdateInput>
    /**
     * Choose, which Nota to update.
     */
    where: NotaWhereUniqueInput
  }


  /**
   * Nota updateMany
   */
  export type NotaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notas.
     */
    data: XOR<NotaUpdateManyMutationInput, NotaUncheckedUpdateManyInput>
    /**
     * Filter which Notas to update
     */
    where?: NotaWhereInput
  }


  /**
   * Nota upsert
   */
  export type NotaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * The filter to search for the Nota to update in case it exists.
     */
    where: NotaWhereUniqueInput
    /**
     * In case the Nota found by the `where` argument doesn't exist, create a new Nota with this data.
     */
    create: XOR<NotaCreateInput, NotaUncheckedCreateInput>
    /**
     * In case the Nota was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotaUpdateInput, NotaUncheckedUpdateInput>
  }


  /**
   * Nota delete
   */
  export type NotaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
    /**
     * Filter which Nota to delete.
     */
    where: NotaWhereUniqueInput
  }


  /**
   * Nota deleteMany
   */
  export type NotaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notas to delete
     */
    where?: NotaWhereInput
  }


  /**
   * Nota.Aluno
   */
  export type Nota$AlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Aluno
     */
    select?: AlunoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlunoInclude<ExtArgs> | null
    where?: AlunoWhereInput
  }


  /**
   * Nota without action
   */
  export type NotaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nota
     */
    select?: NotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotaInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MateriaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MateriaScalarFieldEnum = (typeof MateriaScalarFieldEnum)[keyof typeof MateriaScalarFieldEnum]


  export const EscolaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    endereco: 'endereco',
    contato: 'contato',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EscolaScalarFieldEnum = (typeof EscolaScalarFieldEnum)[keyof typeof EscolaScalarFieldEnum]


  export const TurmaScalarFieldEnum: {
    id: 'id',
    ano: 'ano',
    materiaId: 'materiaId',
    escolaId: 'escolaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TurmaScalarFieldEnum = (typeof TurmaScalarFieldEnum)[keyof typeof TurmaScalarFieldEnum]


  export const AlunoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    escolaId: 'escolaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlunoScalarFieldEnum = (typeof AlunoScalarFieldEnum)[keyof typeof AlunoScalarFieldEnum]


  export const TurmaAlunoScalarFieldEnum: {
    id: 'id',
    alunoId: 'alunoId',
    turmaId: 'turmaId'
  };

  export type TurmaAlunoScalarFieldEnum = (typeof TurmaAlunoScalarFieldEnum)[keyof typeof TurmaAlunoScalarFieldEnum]


  export const NotaScalarFieldEnum: {
    id: 'id',
    valor: 'valor',
    bimestre: 'bimestre',
    turmaAlunoId: 'turmaAlunoId',
    alunoId: 'alunoId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotaScalarFieldEnum = (typeof NotaScalarFieldEnum)[keyof typeof NotaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type MateriaWhereInput = {
    AND?: MateriaWhereInput | MateriaWhereInput[]
    OR?: MateriaWhereInput[]
    NOT?: MateriaWhereInput | MateriaWhereInput[]
    id?: IntFilter<"Materia"> | number
    nome?: StringFilter<"Materia"> | string
    createdAt?: DateTimeFilter<"Materia"> | Date | string
    updatedAt?: DateTimeFilter<"Materia"> | Date | string
    turmas?: TurmaListRelationFilter
  }

  export type MateriaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    turmas?: TurmaOrderByRelationAggregateInput
  }

  export type MateriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MateriaWhereInput | MateriaWhereInput[]
    OR?: MateriaWhereInput[]
    NOT?: MateriaWhereInput | MateriaWhereInput[]
    nome?: StringFilter<"Materia"> | string
    createdAt?: DateTimeFilter<"Materia"> | Date | string
    updatedAt?: DateTimeFilter<"Materia"> | Date | string
    turmas?: TurmaListRelationFilter
  }, "id">

  export type MateriaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MateriaCountOrderByAggregateInput
    _avg?: MateriaAvgOrderByAggregateInput
    _max?: MateriaMaxOrderByAggregateInput
    _min?: MateriaMinOrderByAggregateInput
    _sum?: MateriaSumOrderByAggregateInput
  }

  export type MateriaScalarWhereWithAggregatesInput = {
    AND?: MateriaScalarWhereWithAggregatesInput | MateriaScalarWhereWithAggregatesInput[]
    OR?: MateriaScalarWhereWithAggregatesInput[]
    NOT?: MateriaScalarWhereWithAggregatesInput | MateriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Materia"> | number
    nome?: StringWithAggregatesFilter<"Materia"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Materia"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Materia"> | Date | string
  }

  export type EscolaWhereInput = {
    AND?: EscolaWhereInput | EscolaWhereInput[]
    OR?: EscolaWhereInput[]
    NOT?: EscolaWhereInput | EscolaWhereInput[]
    id?: IntFilter<"Escola"> | number
    nome?: StringFilter<"Escola"> | string
    endereco?: StringFilter<"Escola"> | string
    contato?: StringFilter<"Escola"> | string
    createdAt?: DateTimeFilter<"Escola"> | Date | string
    updatedAt?: DateTimeFilter<"Escola"> | Date | string
    turmas?: TurmaListRelationFilter
    Aluno?: AlunoListRelationFilter
  }

  export type EscolaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    contato?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    turmas?: TurmaOrderByRelationAggregateInput
    Aluno?: AlunoOrderByRelationAggregateInput
  }

  export type EscolaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EscolaWhereInput | EscolaWhereInput[]
    OR?: EscolaWhereInput[]
    NOT?: EscolaWhereInput | EscolaWhereInput[]
    nome?: StringFilter<"Escola"> | string
    endereco?: StringFilter<"Escola"> | string
    contato?: StringFilter<"Escola"> | string
    createdAt?: DateTimeFilter<"Escola"> | Date | string
    updatedAt?: DateTimeFilter<"Escola"> | Date | string
    turmas?: TurmaListRelationFilter
    Aluno?: AlunoListRelationFilter
  }, "id">

  export type EscolaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    contato?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EscolaCountOrderByAggregateInput
    _avg?: EscolaAvgOrderByAggregateInput
    _max?: EscolaMaxOrderByAggregateInput
    _min?: EscolaMinOrderByAggregateInput
    _sum?: EscolaSumOrderByAggregateInput
  }

  export type EscolaScalarWhereWithAggregatesInput = {
    AND?: EscolaScalarWhereWithAggregatesInput | EscolaScalarWhereWithAggregatesInput[]
    OR?: EscolaScalarWhereWithAggregatesInput[]
    NOT?: EscolaScalarWhereWithAggregatesInput | EscolaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Escola"> | number
    nome?: StringWithAggregatesFilter<"Escola"> | string
    endereco?: StringWithAggregatesFilter<"Escola"> | string
    contato?: StringWithAggregatesFilter<"Escola"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Escola"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Escola"> | Date | string
  }

  export type TurmaWhereInput = {
    AND?: TurmaWhereInput | TurmaWhereInput[]
    OR?: TurmaWhereInput[]
    NOT?: TurmaWhereInput | TurmaWhereInput[]
    id?: IntFilter<"Turma"> | number
    ano?: IntFilter<"Turma"> | number
    materiaId?: IntFilter<"Turma"> | number
    escolaId?: IntFilter<"Turma"> | number
    createdAt?: DateTimeFilter<"Turma"> | Date | string
    updatedAt?: DateTimeFilter<"Turma"> | Date | string
    materia?: XOR<MateriaRelationFilter, MateriaWhereInput>
    escola?: XOR<EscolaRelationFilter, EscolaWhereInput>
    alunos?: TurmaAlunoListRelationFilter
  }

  export type TurmaOrderByWithRelationInput = {
    id?: SortOrder
    ano?: SortOrder
    materiaId?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    materia?: MateriaOrderByWithRelationInput
    escola?: EscolaOrderByWithRelationInput
    alunos?: TurmaAlunoOrderByRelationAggregateInput
  }

  export type TurmaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TurmaWhereInput | TurmaWhereInput[]
    OR?: TurmaWhereInput[]
    NOT?: TurmaWhereInput | TurmaWhereInput[]
    ano?: IntFilter<"Turma"> | number
    materiaId?: IntFilter<"Turma"> | number
    escolaId?: IntFilter<"Turma"> | number
    createdAt?: DateTimeFilter<"Turma"> | Date | string
    updatedAt?: DateTimeFilter<"Turma"> | Date | string
    materia?: XOR<MateriaRelationFilter, MateriaWhereInput>
    escola?: XOR<EscolaRelationFilter, EscolaWhereInput>
    alunos?: TurmaAlunoListRelationFilter
  }, "id">

  export type TurmaOrderByWithAggregationInput = {
    id?: SortOrder
    ano?: SortOrder
    materiaId?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TurmaCountOrderByAggregateInput
    _avg?: TurmaAvgOrderByAggregateInput
    _max?: TurmaMaxOrderByAggregateInput
    _min?: TurmaMinOrderByAggregateInput
    _sum?: TurmaSumOrderByAggregateInput
  }

  export type TurmaScalarWhereWithAggregatesInput = {
    AND?: TurmaScalarWhereWithAggregatesInput | TurmaScalarWhereWithAggregatesInput[]
    OR?: TurmaScalarWhereWithAggregatesInput[]
    NOT?: TurmaScalarWhereWithAggregatesInput | TurmaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Turma"> | number
    ano?: IntWithAggregatesFilter<"Turma"> | number
    materiaId?: IntWithAggregatesFilter<"Turma"> | number
    escolaId?: IntWithAggregatesFilter<"Turma"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Turma"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Turma"> | Date | string
  }

  export type AlunoWhereInput = {
    AND?: AlunoWhereInput | AlunoWhereInput[]
    OR?: AlunoWhereInput[]
    NOT?: AlunoWhereInput | AlunoWhereInput[]
    id?: IntFilter<"Aluno"> | number
    nome?: StringFilter<"Aluno"> | string
    escolaId?: IntFilter<"Aluno"> | number
    createdAt?: DateTimeFilter<"Aluno"> | Date | string
    updatedAt?: DateTimeFilter<"Aluno"> | Date | string
    escola?: XOR<EscolaRelationFilter, EscolaWhereInput>
    notas?: NotaListRelationFilter
    turmas?: TurmaAlunoListRelationFilter
  }

  export type AlunoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    escola?: EscolaOrderByWithRelationInput
    notas?: NotaOrderByRelationAggregateInput
    turmas?: TurmaAlunoOrderByRelationAggregateInput
  }

  export type AlunoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlunoWhereInput | AlunoWhereInput[]
    OR?: AlunoWhereInput[]
    NOT?: AlunoWhereInput | AlunoWhereInput[]
    nome?: StringFilter<"Aluno"> | string
    escolaId?: IntFilter<"Aluno"> | number
    createdAt?: DateTimeFilter<"Aluno"> | Date | string
    updatedAt?: DateTimeFilter<"Aluno"> | Date | string
    escola?: XOR<EscolaRelationFilter, EscolaWhereInput>
    notas?: NotaListRelationFilter
    turmas?: TurmaAlunoListRelationFilter
  }, "id">

  export type AlunoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlunoCountOrderByAggregateInput
    _avg?: AlunoAvgOrderByAggregateInput
    _max?: AlunoMaxOrderByAggregateInput
    _min?: AlunoMinOrderByAggregateInput
    _sum?: AlunoSumOrderByAggregateInput
  }

  export type AlunoScalarWhereWithAggregatesInput = {
    AND?: AlunoScalarWhereWithAggregatesInput | AlunoScalarWhereWithAggregatesInput[]
    OR?: AlunoScalarWhereWithAggregatesInput[]
    NOT?: AlunoScalarWhereWithAggregatesInput | AlunoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Aluno"> | number
    nome?: StringWithAggregatesFilter<"Aluno"> | string
    escolaId?: IntWithAggregatesFilter<"Aluno"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Aluno"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Aluno"> | Date | string
  }

  export type TurmaAlunoWhereInput = {
    AND?: TurmaAlunoWhereInput | TurmaAlunoWhereInput[]
    OR?: TurmaAlunoWhereInput[]
    NOT?: TurmaAlunoWhereInput | TurmaAlunoWhereInput[]
    id?: IntFilter<"TurmaAluno"> | number
    alunoId?: IntFilter<"TurmaAluno"> | number
    turmaId?: IntFilter<"TurmaAluno"> | number
    aluno?: XOR<AlunoRelationFilter, AlunoWhereInput>
    turma?: XOR<TurmaRelationFilter, TurmaWhereInput>
    notas?: NotaListRelationFilter
  }

  export type TurmaAlunoOrderByWithRelationInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
    aluno?: AlunoOrderByWithRelationInput
    turma?: TurmaOrderByWithRelationInput
    notas?: NotaOrderByRelationAggregateInput
  }

  export type TurmaAlunoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    alunoId_turmaId?: TurmaAlunoAlunoIdTurmaIdCompoundUniqueInput
    AND?: TurmaAlunoWhereInput | TurmaAlunoWhereInput[]
    OR?: TurmaAlunoWhereInput[]
    NOT?: TurmaAlunoWhereInput | TurmaAlunoWhereInput[]
    alunoId?: IntFilter<"TurmaAluno"> | number
    turmaId?: IntFilter<"TurmaAluno"> | number
    aluno?: XOR<AlunoRelationFilter, AlunoWhereInput>
    turma?: XOR<TurmaRelationFilter, TurmaWhereInput>
    notas?: NotaListRelationFilter
  }, "id" | "alunoId_turmaId">

  export type TurmaAlunoOrderByWithAggregationInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
    _count?: TurmaAlunoCountOrderByAggregateInput
    _avg?: TurmaAlunoAvgOrderByAggregateInput
    _max?: TurmaAlunoMaxOrderByAggregateInput
    _min?: TurmaAlunoMinOrderByAggregateInput
    _sum?: TurmaAlunoSumOrderByAggregateInput
  }

  export type TurmaAlunoScalarWhereWithAggregatesInput = {
    AND?: TurmaAlunoScalarWhereWithAggregatesInput | TurmaAlunoScalarWhereWithAggregatesInput[]
    OR?: TurmaAlunoScalarWhereWithAggregatesInput[]
    NOT?: TurmaAlunoScalarWhereWithAggregatesInput | TurmaAlunoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TurmaAluno"> | number
    alunoId?: IntWithAggregatesFilter<"TurmaAluno"> | number
    turmaId?: IntWithAggregatesFilter<"TurmaAluno"> | number
  }

  export type NotaWhereInput = {
    AND?: NotaWhereInput | NotaWhereInput[]
    OR?: NotaWhereInput[]
    NOT?: NotaWhereInput | NotaWhereInput[]
    id?: IntFilter<"Nota"> | number
    valor?: IntFilter<"Nota"> | number
    bimestre?: IntFilter<"Nota"> | number
    turmaAlunoId?: IntFilter<"Nota"> | number
    alunoId?: IntNullableFilter<"Nota"> | number | null
    createdAt?: DateTimeFilter<"Nota"> | Date | string
    updatedAt?: DateTimeFilter<"Nota"> | Date | string
    turmaAluno?: XOR<TurmaAlunoRelationFilter, TurmaAlunoWhereInput>
    Aluno?: XOR<AlunoNullableRelationFilter, AlunoWhereInput> | null
  }

  export type NotaOrderByWithRelationInput = {
    id?: SortOrder
    valor?: SortOrder
    bimestre?: SortOrder
    turmaAlunoId?: SortOrder
    alunoId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    turmaAluno?: TurmaAlunoOrderByWithRelationInput
    Aluno?: AlunoOrderByWithRelationInput
  }

  export type NotaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotaWhereInput | NotaWhereInput[]
    OR?: NotaWhereInput[]
    NOT?: NotaWhereInput | NotaWhereInput[]
    valor?: IntFilter<"Nota"> | number
    bimestre?: IntFilter<"Nota"> | number
    turmaAlunoId?: IntFilter<"Nota"> | number
    alunoId?: IntNullableFilter<"Nota"> | number | null
    createdAt?: DateTimeFilter<"Nota"> | Date | string
    updatedAt?: DateTimeFilter<"Nota"> | Date | string
    turmaAluno?: XOR<TurmaAlunoRelationFilter, TurmaAlunoWhereInput>
    Aluno?: XOR<AlunoNullableRelationFilter, AlunoWhereInput> | null
  }, "id">

  export type NotaOrderByWithAggregationInput = {
    id?: SortOrder
    valor?: SortOrder
    bimestre?: SortOrder
    turmaAlunoId?: SortOrder
    alunoId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotaCountOrderByAggregateInput
    _avg?: NotaAvgOrderByAggregateInput
    _max?: NotaMaxOrderByAggregateInput
    _min?: NotaMinOrderByAggregateInput
    _sum?: NotaSumOrderByAggregateInput
  }

  export type NotaScalarWhereWithAggregatesInput = {
    AND?: NotaScalarWhereWithAggregatesInput | NotaScalarWhereWithAggregatesInput[]
    OR?: NotaScalarWhereWithAggregatesInput[]
    NOT?: NotaScalarWhereWithAggregatesInput | NotaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Nota"> | number
    valor?: IntWithAggregatesFilter<"Nota"> | number
    bimestre?: IntWithAggregatesFilter<"Nota"> | number
    turmaAlunoId?: IntWithAggregatesFilter<"Nota"> | number
    alunoId?: IntNullableWithAggregatesFilter<"Nota"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Nota"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Nota"> | Date | string
  }

  export type MateriaCreateInput = {
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
    turmas?: TurmaCreateNestedManyWithoutMateriaInput
  }

  export type MateriaUncheckedCreateInput = {
    id?: number
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
    turmas?: TurmaUncheckedCreateNestedManyWithoutMateriaInput
  }

  export type MateriaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmas?: TurmaUpdateManyWithoutMateriaNestedInput
  }

  export type MateriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmas?: TurmaUncheckedUpdateManyWithoutMateriaNestedInput
  }

  export type MateriaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MateriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EscolaCreateInput = {
    nome: string
    endereco: string
    contato: string
    createdAt?: Date | string
    updatedAt?: Date | string
    turmas?: TurmaCreateNestedManyWithoutEscolaInput
    Aluno?: AlunoCreateNestedManyWithoutEscolaInput
  }

  export type EscolaUncheckedCreateInput = {
    id?: number
    nome: string
    endereco: string
    contato: string
    createdAt?: Date | string
    updatedAt?: Date | string
    turmas?: TurmaUncheckedCreateNestedManyWithoutEscolaInput
    Aluno?: AlunoUncheckedCreateNestedManyWithoutEscolaInput
  }

  export type EscolaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmas?: TurmaUpdateManyWithoutEscolaNestedInput
    Aluno?: AlunoUpdateManyWithoutEscolaNestedInput
  }

  export type EscolaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmas?: TurmaUncheckedUpdateManyWithoutEscolaNestedInput
    Aluno?: AlunoUncheckedUpdateManyWithoutEscolaNestedInput
  }

  export type EscolaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EscolaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurmaCreateInput = {
    ano: number
    createdAt?: Date | string
    updatedAt?: Date | string
    materia: MateriaCreateNestedOneWithoutTurmasInput
    escola: EscolaCreateNestedOneWithoutTurmasInput
    alunos?: TurmaAlunoCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateInput = {
    id?: number
    ano: number
    materiaId: number
    escolaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    alunos?: TurmaAlunoUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUpdateInput = {
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materia?: MateriaUpdateOneRequiredWithoutTurmasNestedInput
    escola?: EscolaUpdateOneRequiredWithoutTurmasNestedInput
    alunos?: TurmaAlunoUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    materiaId?: IntFieldUpdateOperationsInput | number
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunos?: TurmaAlunoUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUpdateManyMutationInput = {
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurmaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    materiaId?: IntFieldUpdateOperationsInput | number
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlunoCreateInput = {
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
    escola: EscolaCreateNestedOneWithoutAlunoInput
    notas?: NotaCreateNestedManyWithoutAlunoInput
    turmas?: TurmaAlunoCreateNestedManyWithoutAlunoInput
  }

  export type AlunoUncheckedCreateInput = {
    id?: number
    nome: string
    escolaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notas?: NotaUncheckedCreateNestedManyWithoutAlunoInput
    turmas?: TurmaAlunoUncheckedCreateNestedManyWithoutAlunoInput
  }

  export type AlunoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    escola?: EscolaUpdateOneRequiredWithoutAlunoNestedInput
    notas?: NotaUpdateManyWithoutAlunoNestedInput
    turmas?: TurmaAlunoUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NotaUncheckedUpdateManyWithoutAlunoNestedInput
    turmas?: TurmaAlunoUncheckedUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlunoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurmaAlunoCreateInput = {
    aluno: AlunoCreateNestedOneWithoutTurmasInput
    turma: TurmaCreateNestedOneWithoutAlunosInput
    notas?: NotaCreateNestedManyWithoutTurmaAlunoInput
  }

  export type TurmaAlunoUncheckedCreateInput = {
    id?: number
    alunoId: number
    turmaId: number
    notas?: NotaUncheckedCreateNestedManyWithoutTurmaAlunoInput
  }

  export type TurmaAlunoUpdateInput = {
    aluno?: AlunoUpdateOneRequiredWithoutTurmasNestedInput
    turma?: TurmaUpdateOneRequiredWithoutAlunosNestedInput
    notas?: NotaUpdateManyWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
    notas?: NotaUncheckedUpdateManyWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunoUpdateManyMutationInput = {

  }

  export type TurmaAlunoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
  }

  export type NotaCreateInput = {
    valor: number
    bimestre: number
    createdAt?: Date | string
    updatedAt?: Date | string
    turmaAluno: TurmaAlunoCreateNestedOneWithoutNotasInput
    Aluno?: AlunoCreateNestedOneWithoutNotasInput
  }

  export type NotaUncheckedCreateInput = {
    id?: number
    valor: number
    bimestre: number
    turmaAlunoId: number
    alunoId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotaUpdateInput = {
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmaAluno?: TurmaAlunoUpdateOneRequiredWithoutNotasNestedInput
    Aluno?: AlunoUpdateOneWithoutNotasNestedInput
  }

  export type NotaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    turmaAlunoId?: IntFieldUpdateOperationsInput | number
    alunoId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotaUpdateManyMutationInput = {
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    turmaAlunoId?: IntFieldUpdateOperationsInput | number
    alunoId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TurmaListRelationFilter = {
    every?: TurmaWhereInput
    some?: TurmaWhereInput
    none?: TurmaWhereInput
  }

  export type TurmaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MateriaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MateriaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MateriaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MateriaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MateriaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AlunoListRelationFilter = {
    every?: AlunoWhereInput
    some?: AlunoWhereInput
    none?: AlunoWhereInput
  }

  export type AlunoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EscolaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    contato?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EscolaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EscolaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    contato?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EscolaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    contato?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EscolaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MateriaRelationFilter = {
    is?: MateriaWhereInput
    isNot?: MateriaWhereInput
  }

  export type EscolaRelationFilter = {
    is?: EscolaWhereInput
    isNot?: EscolaWhereInput
  }

  export type TurmaAlunoListRelationFilter = {
    every?: TurmaAlunoWhereInput
    some?: TurmaAlunoWhereInput
    none?: TurmaAlunoWhereInput
  }

  export type TurmaAlunoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TurmaCountOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    materiaId?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TurmaAvgOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    materiaId?: SortOrder
    escolaId?: SortOrder
  }

  export type TurmaMaxOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    materiaId?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TurmaMinOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    materiaId?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TurmaSumOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    materiaId?: SortOrder
    escolaId?: SortOrder
  }

  export type NotaListRelationFilter = {
    every?: NotaWhereInput
    some?: NotaWhereInput
    none?: NotaWhereInput
  }

  export type NotaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlunoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlunoAvgOrderByAggregateInput = {
    id?: SortOrder
    escolaId?: SortOrder
  }

  export type AlunoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlunoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    escolaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlunoSumOrderByAggregateInput = {
    id?: SortOrder
    escolaId?: SortOrder
  }

  export type AlunoRelationFilter = {
    is?: AlunoWhereInput
    isNot?: AlunoWhereInput
  }

  export type TurmaRelationFilter = {
    is?: TurmaWhereInput
    isNot?: TurmaWhereInput
  }

  export type TurmaAlunoAlunoIdTurmaIdCompoundUniqueInput = {
    alunoId: number
    turmaId: number
  }

  export type TurmaAlunoCountOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
  }

  export type TurmaAlunoAvgOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
  }

  export type TurmaAlunoMaxOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
  }

  export type TurmaAlunoMinOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
  }

  export type TurmaAlunoSumOrderByAggregateInput = {
    id?: SortOrder
    alunoId?: SortOrder
    turmaId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TurmaAlunoRelationFilter = {
    is?: TurmaAlunoWhereInput
    isNot?: TurmaAlunoWhereInput
  }

  export type AlunoNullableRelationFilter = {
    is?: AlunoWhereInput | null
    isNot?: AlunoWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type NotaCountOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    bimestre?: SortOrder
    turmaAlunoId?: SortOrder
    alunoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotaAvgOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    bimestre?: SortOrder
    turmaAlunoId?: SortOrder
    alunoId?: SortOrder
  }

  export type NotaMaxOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    bimestre?: SortOrder
    turmaAlunoId?: SortOrder
    alunoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotaMinOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    bimestre?: SortOrder
    turmaAlunoId?: SortOrder
    alunoId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotaSumOrderByAggregateInput = {
    id?: SortOrder
    valor?: SortOrder
    bimestre?: SortOrder
    turmaAlunoId?: SortOrder
    alunoId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type TurmaCreateNestedManyWithoutMateriaInput = {
    create?: XOR<TurmaCreateWithoutMateriaInput, TurmaUncheckedCreateWithoutMateriaInput> | TurmaCreateWithoutMateriaInput[] | TurmaUncheckedCreateWithoutMateriaInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutMateriaInput | TurmaCreateOrConnectWithoutMateriaInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
  }

  export type TurmaUncheckedCreateNestedManyWithoutMateriaInput = {
    create?: XOR<TurmaCreateWithoutMateriaInput, TurmaUncheckedCreateWithoutMateriaInput> | TurmaCreateWithoutMateriaInput[] | TurmaUncheckedCreateWithoutMateriaInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutMateriaInput | TurmaCreateOrConnectWithoutMateriaInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TurmaUpdateManyWithoutMateriaNestedInput = {
    create?: XOR<TurmaCreateWithoutMateriaInput, TurmaUncheckedCreateWithoutMateriaInput> | TurmaCreateWithoutMateriaInput[] | TurmaUncheckedCreateWithoutMateriaInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutMateriaInput | TurmaCreateOrConnectWithoutMateriaInput[]
    upsert?: TurmaUpsertWithWhereUniqueWithoutMateriaInput | TurmaUpsertWithWhereUniqueWithoutMateriaInput[]
    set?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    disconnect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    delete?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    update?: TurmaUpdateWithWhereUniqueWithoutMateriaInput | TurmaUpdateWithWhereUniqueWithoutMateriaInput[]
    updateMany?: TurmaUpdateManyWithWhereWithoutMateriaInput | TurmaUpdateManyWithWhereWithoutMateriaInput[]
    deleteMany?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TurmaUncheckedUpdateManyWithoutMateriaNestedInput = {
    create?: XOR<TurmaCreateWithoutMateriaInput, TurmaUncheckedCreateWithoutMateriaInput> | TurmaCreateWithoutMateriaInput[] | TurmaUncheckedCreateWithoutMateriaInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutMateriaInput | TurmaCreateOrConnectWithoutMateriaInput[]
    upsert?: TurmaUpsertWithWhereUniqueWithoutMateriaInput | TurmaUpsertWithWhereUniqueWithoutMateriaInput[]
    set?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    disconnect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    delete?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    update?: TurmaUpdateWithWhereUniqueWithoutMateriaInput | TurmaUpdateWithWhereUniqueWithoutMateriaInput[]
    updateMany?: TurmaUpdateManyWithWhereWithoutMateriaInput | TurmaUpdateManyWithWhereWithoutMateriaInput[]
    deleteMany?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
  }

  export type TurmaCreateNestedManyWithoutEscolaInput = {
    create?: XOR<TurmaCreateWithoutEscolaInput, TurmaUncheckedCreateWithoutEscolaInput> | TurmaCreateWithoutEscolaInput[] | TurmaUncheckedCreateWithoutEscolaInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutEscolaInput | TurmaCreateOrConnectWithoutEscolaInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
  }

  export type AlunoCreateNestedManyWithoutEscolaInput = {
    create?: XOR<AlunoCreateWithoutEscolaInput, AlunoUncheckedCreateWithoutEscolaInput> | AlunoCreateWithoutEscolaInput[] | AlunoUncheckedCreateWithoutEscolaInput[]
    connectOrCreate?: AlunoCreateOrConnectWithoutEscolaInput | AlunoCreateOrConnectWithoutEscolaInput[]
    connect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
  }

  export type TurmaUncheckedCreateNestedManyWithoutEscolaInput = {
    create?: XOR<TurmaCreateWithoutEscolaInput, TurmaUncheckedCreateWithoutEscolaInput> | TurmaCreateWithoutEscolaInput[] | TurmaUncheckedCreateWithoutEscolaInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutEscolaInput | TurmaCreateOrConnectWithoutEscolaInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
  }

  export type AlunoUncheckedCreateNestedManyWithoutEscolaInput = {
    create?: XOR<AlunoCreateWithoutEscolaInput, AlunoUncheckedCreateWithoutEscolaInput> | AlunoCreateWithoutEscolaInput[] | AlunoUncheckedCreateWithoutEscolaInput[]
    connectOrCreate?: AlunoCreateOrConnectWithoutEscolaInput | AlunoCreateOrConnectWithoutEscolaInput[]
    connect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
  }

  export type TurmaUpdateManyWithoutEscolaNestedInput = {
    create?: XOR<TurmaCreateWithoutEscolaInput, TurmaUncheckedCreateWithoutEscolaInput> | TurmaCreateWithoutEscolaInput[] | TurmaUncheckedCreateWithoutEscolaInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutEscolaInput | TurmaCreateOrConnectWithoutEscolaInput[]
    upsert?: TurmaUpsertWithWhereUniqueWithoutEscolaInput | TurmaUpsertWithWhereUniqueWithoutEscolaInput[]
    set?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    disconnect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    delete?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    update?: TurmaUpdateWithWhereUniqueWithoutEscolaInput | TurmaUpdateWithWhereUniqueWithoutEscolaInput[]
    updateMany?: TurmaUpdateManyWithWhereWithoutEscolaInput | TurmaUpdateManyWithWhereWithoutEscolaInput[]
    deleteMany?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
  }

  export type AlunoUpdateManyWithoutEscolaNestedInput = {
    create?: XOR<AlunoCreateWithoutEscolaInput, AlunoUncheckedCreateWithoutEscolaInput> | AlunoCreateWithoutEscolaInput[] | AlunoUncheckedCreateWithoutEscolaInput[]
    connectOrCreate?: AlunoCreateOrConnectWithoutEscolaInput | AlunoCreateOrConnectWithoutEscolaInput[]
    upsert?: AlunoUpsertWithWhereUniqueWithoutEscolaInput | AlunoUpsertWithWhereUniqueWithoutEscolaInput[]
    set?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    disconnect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    delete?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    connect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    update?: AlunoUpdateWithWhereUniqueWithoutEscolaInput | AlunoUpdateWithWhereUniqueWithoutEscolaInput[]
    updateMany?: AlunoUpdateManyWithWhereWithoutEscolaInput | AlunoUpdateManyWithWhereWithoutEscolaInput[]
    deleteMany?: AlunoScalarWhereInput | AlunoScalarWhereInput[]
  }

  export type TurmaUncheckedUpdateManyWithoutEscolaNestedInput = {
    create?: XOR<TurmaCreateWithoutEscolaInput, TurmaUncheckedCreateWithoutEscolaInput> | TurmaCreateWithoutEscolaInput[] | TurmaUncheckedCreateWithoutEscolaInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutEscolaInput | TurmaCreateOrConnectWithoutEscolaInput[]
    upsert?: TurmaUpsertWithWhereUniqueWithoutEscolaInput | TurmaUpsertWithWhereUniqueWithoutEscolaInput[]
    set?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    disconnect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    delete?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    update?: TurmaUpdateWithWhereUniqueWithoutEscolaInput | TurmaUpdateWithWhereUniqueWithoutEscolaInput[]
    updateMany?: TurmaUpdateManyWithWhereWithoutEscolaInput | TurmaUpdateManyWithWhereWithoutEscolaInput[]
    deleteMany?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
  }

  export type AlunoUncheckedUpdateManyWithoutEscolaNestedInput = {
    create?: XOR<AlunoCreateWithoutEscolaInput, AlunoUncheckedCreateWithoutEscolaInput> | AlunoCreateWithoutEscolaInput[] | AlunoUncheckedCreateWithoutEscolaInput[]
    connectOrCreate?: AlunoCreateOrConnectWithoutEscolaInput | AlunoCreateOrConnectWithoutEscolaInput[]
    upsert?: AlunoUpsertWithWhereUniqueWithoutEscolaInput | AlunoUpsertWithWhereUniqueWithoutEscolaInput[]
    set?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    disconnect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    delete?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    connect?: AlunoWhereUniqueInput | AlunoWhereUniqueInput[]
    update?: AlunoUpdateWithWhereUniqueWithoutEscolaInput | AlunoUpdateWithWhereUniqueWithoutEscolaInput[]
    updateMany?: AlunoUpdateManyWithWhereWithoutEscolaInput | AlunoUpdateManyWithWhereWithoutEscolaInput[]
    deleteMany?: AlunoScalarWhereInput | AlunoScalarWhereInput[]
  }

  export type MateriaCreateNestedOneWithoutTurmasInput = {
    create?: XOR<MateriaCreateWithoutTurmasInput, MateriaUncheckedCreateWithoutTurmasInput>
    connectOrCreate?: MateriaCreateOrConnectWithoutTurmasInput
    connect?: MateriaWhereUniqueInput
  }

  export type EscolaCreateNestedOneWithoutTurmasInput = {
    create?: XOR<EscolaCreateWithoutTurmasInput, EscolaUncheckedCreateWithoutTurmasInput>
    connectOrCreate?: EscolaCreateOrConnectWithoutTurmasInput
    connect?: EscolaWhereUniqueInput
  }

  export type TurmaAlunoCreateNestedManyWithoutTurmaInput = {
    create?: XOR<TurmaAlunoCreateWithoutTurmaInput, TurmaAlunoUncheckedCreateWithoutTurmaInput> | TurmaAlunoCreateWithoutTurmaInput[] | TurmaAlunoUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutTurmaInput | TurmaAlunoCreateOrConnectWithoutTurmaInput[]
    connect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
  }

  export type TurmaAlunoUncheckedCreateNestedManyWithoutTurmaInput = {
    create?: XOR<TurmaAlunoCreateWithoutTurmaInput, TurmaAlunoUncheckedCreateWithoutTurmaInput> | TurmaAlunoCreateWithoutTurmaInput[] | TurmaAlunoUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutTurmaInput | TurmaAlunoCreateOrConnectWithoutTurmaInput[]
    connect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
  }

  export type MateriaUpdateOneRequiredWithoutTurmasNestedInput = {
    create?: XOR<MateriaCreateWithoutTurmasInput, MateriaUncheckedCreateWithoutTurmasInput>
    connectOrCreate?: MateriaCreateOrConnectWithoutTurmasInput
    upsert?: MateriaUpsertWithoutTurmasInput
    connect?: MateriaWhereUniqueInput
    update?: XOR<XOR<MateriaUpdateToOneWithWhereWithoutTurmasInput, MateriaUpdateWithoutTurmasInput>, MateriaUncheckedUpdateWithoutTurmasInput>
  }

  export type EscolaUpdateOneRequiredWithoutTurmasNestedInput = {
    create?: XOR<EscolaCreateWithoutTurmasInput, EscolaUncheckedCreateWithoutTurmasInput>
    connectOrCreate?: EscolaCreateOrConnectWithoutTurmasInput
    upsert?: EscolaUpsertWithoutTurmasInput
    connect?: EscolaWhereUniqueInput
    update?: XOR<XOR<EscolaUpdateToOneWithWhereWithoutTurmasInput, EscolaUpdateWithoutTurmasInput>, EscolaUncheckedUpdateWithoutTurmasInput>
  }

  export type TurmaAlunoUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<TurmaAlunoCreateWithoutTurmaInput, TurmaAlunoUncheckedCreateWithoutTurmaInput> | TurmaAlunoCreateWithoutTurmaInput[] | TurmaAlunoUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutTurmaInput | TurmaAlunoCreateOrConnectWithoutTurmaInput[]
    upsert?: TurmaAlunoUpsertWithWhereUniqueWithoutTurmaInput | TurmaAlunoUpsertWithWhereUniqueWithoutTurmaInput[]
    set?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    disconnect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    delete?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    connect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    update?: TurmaAlunoUpdateWithWhereUniqueWithoutTurmaInput | TurmaAlunoUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: TurmaAlunoUpdateManyWithWhereWithoutTurmaInput | TurmaAlunoUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: TurmaAlunoScalarWhereInput | TurmaAlunoScalarWhereInput[]
  }

  export type TurmaAlunoUncheckedUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<TurmaAlunoCreateWithoutTurmaInput, TurmaAlunoUncheckedCreateWithoutTurmaInput> | TurmaAlunoCreateWithoutTurmaInput[] | TurmaAlunoUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutTurmaInput | TurmaAlunoCreateOrConnectWithoutTurmaInput[]
    upsert?: TurmaAlunoUpsertWithWhereUniqueWithoutTurmaInput | TurmaAlunoUpsertWithWhereUniqueWithoutTurmaInput[]
    set?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    disconnect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    delete?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    connect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    update?: TurmaAlunoUpdateWithWhereUniqueWithoutTurmaInput | TurmaAlunoUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: TurmaAlunoUpdateManyWithWhereWithoutTurmaInput | TurmaAlunoUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: TurmaAlunoScalarWhereInput | TurmaAlunoScalarWhereInput[]
  }

  export type EscolaCreateNestedOneWithoutAlunoInput = {
    create?: XOR<EscolaCreateWithoutAlunoInput, EscolaUncheckedCreateWithoutAlunoInput>
    connectOrCreate?: EscolaCreateOrConnectWithoutAlunoInput
    connect?: EscolaWhereUniqueInput
  }

  export type NotaCreateNestedManyWithoutAlunoInput = {
    create?: XOR<NotaCreateWithoutAlunoInput, NotaUncheckedCreateWithoutAlunoInput> | NotaCreateWithoutAlunoInput[] | NotaUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: NotaCreateOrConnectWithoutAlunoInput | NotaCreateOrConnectWithoutAlunoInput[]
    connect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
  }

  export type TurmaAlunoCreateNestedManyWithoutAlunoInput = {
    create?: XOR<TurmaAlunoCreateWithoutAlunoInput, TurmaAlunoUncheckedCreateWithoutAlunoInput> | TurmaAlunoCreateWithoutAlunoInput[] | TurmaAlunoUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutAlunoInput | TurmaAlunoCreateOrConnectWithoutAlunoInput[]
    connect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
  }

  export type NotaUncheckedCreateNestedManyWithoutAlunoInput = {
    create?: XOR<NotaCreateWithoutAlunoInput, NotaUncheckedCreateWithoutAlunoInput> | NotaCreateWithoutAlunoInput[] | NotaUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: NotaCreateOrConnectWithoutAlunoInput | NotaCreateOrConnectWithoutAlunoInput[]
    connect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
  }

  export type TurmaAlunoUncheckedCreateNestedManyWithoutAlunoInput = {
    create?: XOR<TurmaAlunoCreateWithoutAlunoInput, TurmaAlunoUncheckedCreateWithoutAlunoInput> | TurmaAlunoCreateWithoutAlunoInput[] | TurmaAlunoUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutAlunoInput | TurmaAlunoCreateOrConnectWithoutAlunoInput[]
    connect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
  }

  export type EscolaUpdateOneRequiredWithoutAlunoNestedInput = {
    create?: XOR<EscolaCreateWithoutAlunoInput, EscolaUncheckedCreateWithoutAlunoInput>
    connectOrCreate?: EscolaCreateOrConnectWithoutAlunoInput
    upsert?: EscolaUpsertWithoutAlunoInput
    connect?: EscolaWhereUniqueInput
    update?: XOR<XOR<EscolaUpdateToOneWithWhereWithoutAlunoInput, EscolaUpdateWithoutAlunoInput>, EscolaUncheckedUpdateWithoutAlunoInput>
  }

  export type NotaUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<NotaCreateWithoutAlunoInput, NotaUncheckedCreateWithoutAlunoInput> | NotaCreateWithoutAlunoInput[] | NotaUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: NotaCreateOrConnectWithoutAlunoInput | NotaCreateOrConnectWithoutAlunoInput[]
    upsert?: NotaUpsertWithWhereUniqueWithoutAlunoInput | NotaUpsertWithWhereUniqueWithoutAlunoInput[]
    set?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    disconnect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    delete?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    connect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    update?: NotaUpdateWithWhereUniqueWithoutAlunoInput | NotaUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: NotaUpdateManyWithWhereWithoutAlunoInput | NotaUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: NotaScalarWhereInput | NotaScalarWhereInput[]
  }

  export type TurmaAlunoUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<TurmaAlunoCreateWithoutAlunoInput, TurmaAlunoUncheckedCreateWithoutAlunoInput> | TurmaAlunoCreateWithoutAlunoInput[] | TurmaAlunoUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutAlunoInput | TurmaAlunoCreateOrConnectWithoutAlunoInput[]
    upsert?: TurmaAlunoUpsertWithWhereUniqueWithoutAlunoInput | TurmaAlunoUpsertWithWhereUniqueWithoutAlunoInput[]
    set?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    disconnect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    delete?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    connect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    update?: TurmaAlunoUpdateWithWhereUniqueWithoutAlunoInput | TurmaAlunoUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: TurmaAlunoUpdateManyWithWhereWithoutAlunoInput | TurmaAlunoUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: TurmaAlunoScalarWhereInput | TurmaAlunoScalarWhereInput[]
  }

  export type NotaUncheckedUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<NotaCreateWithoutAlunoInput, NotaUncheckedCreateWithoutAlunoInput> | NotaCreateWithoutAlunoInput[] | NotaUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: NotaCreateOrConnectWithoutAlunoInput | NotaCreateOrConnectWithoutAlunoInput[]
    upsert?: NotaUpsertWithWhereUniqueWithoutAlunoInput | NotaUpsertWithWhereUniqueWithoutAlunoInput[]
    set?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    disconnect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    delete?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    connect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    update?: NotaUpdateWithWhereUniqueWithoutAlunoInput | NotaUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: NotaUpdateManyWithWhereWithoutAlunoInput | NotaUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: NotaScalarWhereInput | NotaScalarWhereInput[]
  }

  export type TurmaAlunoUncheckedUpdateManyWithoutAlunoNestedInput = {
    create?: XOR<TurmaAlunoCreateWithoutAlunoInput, TurmaAlunoUncheckedCreateWithoutAlunoInput> | TurmaAlunoCreateWithoutAlunoInput[] | TurmaAlunoUncheckedCreateWithoutAlunoInput[]
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutAlunoInput | TurmaAlunoCreateOrConnectWithoutAlunoInput[]
    upsert?: TurmaAlunoUpsertWithWhereUniqueWithoutAlunoInput | TurmaAlunoUpsertWithWhereUniqueWithoutAlunoInput[]
    set?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    disconnect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    delete?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    connect?: TurmaAlunoWhereUniqueInput | TurmaAlunoWhereUniqueInput[]
    update?: TurmaAlunoUpdateWithWhereUniqueWithoutAlunoInput | TurmaAlunoUpdateWithWhereUniqueWithoutAlunoInput[]
    updateMany?: TurmaAlunoUpdateManyWithWhereWithoutAlunoInput | TurmaAlunoUpdateManyWithWhereWithoutAlunoInput[]
    deleteMany?: TurmaAlunoScalarWhereInput | TurmaAlunoScalarWhereInput[]
  }

  export type AlunoCreateNestedOneWithoutTurmasInput = {
    create?: XOR<AlunoCreateWithoutTurmasInput, AlunoUncheckedCreateWithoutTurmasInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutTurmasInput
    connect?: AlunoWhereUniqueInput
  }

  export type TurmaCreateNestedOneWithoutAlunosInput = {
    create?: XOR<TurmaCreateWithoutAlunosInput, TurmaUncheckedCreateWithoutAlunosInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutAlunosInput
    connect?: TurmaWhereUniqueInput
  }

  export type NotaCreateNestedManyWithoutTurmaAlunoInput = {
    create?: XOR<NotaCreateWithoutTurmaAlunoInput, NotaUncheckedCreateWithoutTurmaAlunoInput> | NotaCreateWithoutTurmaAlunoInput[] | NotaUncheckedCreateWithoutTurmaAlunoInput[]
    connectOrCreate?: NotaCreateOrConnectWithoutTurmaAlunoInput | NotaCreateOrConnectWithoutTurmaAlunoInput[]
    connect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
  }

  export type NotaUncheckedCreateNestedManyWithoutTurmaAlunoInput = {
    create?: XOR<NotaCreateWithoutTurmaAlunoInput, NotaUncheckedCreateWithoutTurmaAlunoInput> | NotaCreateWithoutTurmaAlunoInput[] | NotaUncheckedCreateWithoutTurmaAlunoInput[]
    connectOrCreate?: NotaCreateOrConnectWithoutTurmaAlunoInput | NotaCreateOrConnectWithoutTurmaAlunoInput[]
    connect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
  }

  export type AlunoUpdateOneRequiredWithoutTurmasNestedInput = {
    create?: XOR<AlunoCreateWithoutTurmasInput, AlunoUncheckedCreateWithoutTurmasInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutTurmasInput
    upsert?: AlunoUpsertWithoutTurmasInput
    connect?: AlunoWhereUniqueInput
    update?: XOR<XOR<AlunoUpdateToOneWithWhereWithoutTurmasInput, AlunoUpdateWithoutTurmasInput>, AlunoUncheckedUpdateWithoutTurmasInput>
  }

  export type TurmaUpdateOneRequiredWithoutAlunosNestedInput = {
    create?: XOR<TurmaCreateWithoutAlunosInput, TurmaUncheckedCreateWithoutAlunosInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutAlunosInput
    upsert?: TurmaUpsertWithoutAlunosInput
    connect?: TurmaWhereUniqueInput
    update?: XOR<XOR<TurmaUpdateToOneWithWhereWithoutAlunosInput, TurmaUpdateWithoutAlunosInput>, TurmaUncheckedUpdateWithoutAlunosInput>
  }

  export type NotaUpdateManyWithoutTurmaAlunoNestedInput = {
    create?: XOR<NotaCreateWithoutTurmaAlunoInput, NotaUncheckedCreateWithoutTurmaAlunoInput> | NotaCreateWithoutTurmaAlunoInput[] | NotaUncheckedCreateWithoutTurmaAlunoInput[]
    connectOrCreate?: NotaCreateOrConnectWithoutTurmaAlunoInput | NotaCreateOrConnectWithoutTurmaAlunoInput[]
    upsert?: NotaUpsertWithWhereUniqueWithoutTurmaAlunoInput | NotaUpsertWithWhereUniqueWithoutTurmaAlunoInput[]
    set?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    disconnect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    delete?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    connect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    update?: NotaUpdateWithWhereUniqueWithoutTurmaAlunoInput | NotaUpdateWithWhereUniqueWithoutTurmaAlunoInput[]
    updateMany?: NotaUpdateManyWithWhereWithoutTurmaAlunoInput | NotaUpdateManyWithWhereWithoutTurmaAlunoInput[]
    deleteMany?: NotaScalarWhereInput | NotaScalarWhereInput[]
  }

  export type NotaUncheckedUpdateManyWithoutTurmaAlunoNestedInput = {
    create?: XOR<NotaCreateWithoutTurmaAlunoInput, NotaUncheckedCreateWithoutTurmaAlunoInput> | NotaCreateWithoutTurmaAlunoInput[] | NotaUncheckedCreateWithoutTurmaAlunoInput[]
    connectOrCreate?: NotaCreateOrConnectWithoutTurmaAlunoInput | NotaCreateOrConnectWithoutTurmaAlunoInput[]
    upsert?: NotaUpsertWithWhereUniqueWithoutTurmaAlunoInput | NotaUpsertWithWhereUniqueWithoutTurmaAlunoInput[]
    set?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    disconnect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    delete?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    connect?: NotaWhereUniqueInput | NotaWhereUniqueInput[]
    update?: NotaUpdateWithWhereUniqueWithoutTurmaAlunoInput | NotaUpdateWithWhereUniqueWithoutTurmaAlunoInput[]
    updateMany?: NotaUpdateManyWithWhereWithoutTurmaAlunoInput | NotaUpdateManyWithWhereWithoutTurmaAlunoInput[]
    deleteMany?: NotaScalarWhereInput | NotaScalarWhereInput[]
  }

  export type TurmaAlunoCreateNestedOneWithoutNotasInput = {
    create?: XOR<TurmaAlunoCreateWithoutNotasInput, TurmaAlunoUncheckedCreateWithoutNotasInput>
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutNotasInput
    connect?: TurmaAlunoWhereUniqueInput
  }

  export type AlunoCreateNestedOneWithoutNotasInput = {
    create?: XOR<AlunoCreateWithoutNotasInput, AlunoUncheckedCreateWithoutNotasInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutNotasInput
    connect?: AlunoWhereUniqueInput
  }

  export type TurmaAlunoUpdateOneRequiredWithoutNotasNestedInput = {
    create?: XOR<TurmaAlunoCreateWithoutNotasInput, TurmaAlunoUncheckedCreateWithoutNotasInput>
    connectOrCreate?: TurmaAlunoCreateOrConnectWithoutNotasInput
    upsert?: TurmaAlunoUpsertWithoutNotasInput
    connect?: TurmaAlunoWhereUniqueInput
    update?: XOR<XOR<TurmaAlunoUpdateToOneWithWhereWithoutNotasInput, TurmaAlunoUpdateWithoutNotasInput>, TurmaAlunoUncheckedUpdateWithoutNotasInput>
  }

  export type AlunoUpdateOneWithoutNotasNestedInput = {
    create?: XOR<AlunoCreateWithoutNotasInput, AlunoUncheckedCreateWithoutNotasInput>
    connectOrCreate?: AlunoCreateOrConnectWithoutNotasInput
    upsert?: AlunoUpsertWithoutNotasInput
    disconnect?: AlunoWhereInput | boolean
    delete?: AlunoWhereInput | boolean
    connect?: AlunoWhereUniqueInput
    update?: XOR<XOR<AlunoUpdateToOneWithWhereWithoutNotasInput, AlunoUpdateWithoutNotasInput>, AlunoUncheckedUpdateWithoutNotasInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type TurmaCreateWithoutMateriaInput = {
    ano: number
    createdAt?: Date | string
    updatedAt?: Date | string
    escola: EscolaCreateNestedOneWithoutTurmasInput
    alunos?: TurmaAlunoCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateWithoutMateriaInput = {
    id?: number
    ano: number
    escolaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    alunos?: TurmaAlunoUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaCreateOrConnectWithoutMateriaInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutMateriaInput, TurmaUncheckedCreateWithoutMateriaInput>
  }

  export type TurmaUpsertWithWhereUniqueWithoutMateriaInput = {
    where: TurmaWhereUniqueInput
    update: XOR<TurmaUpdateWithoutMateriaInput, TurmaUncheckedUpdateWithoutMateriaInput>
    create: XOR<TurmaCreateWithoutMateriaInput, TurmaUncheckedCreateWithoutMateriaInput>
  }

  export type TurmaUpdateWithWhereUniqueWithoutMateriaInput = {
    where: TurmaWhereUniqueInput
    data: XOR<TurmaUpdateWithoutMateriaInput, TurmaUncheckedUpdateWithoutMateriaInput>
  }

  export type TurmaUpdateManyWithWhereWithoutMateriaInput = {
    where: TurmaScalarWhereInput
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyWithoutMateriaInput>
  }

  export type TurmaScalarWhereInput = {
    AND?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
    OR?: TurmaScalarWhereInput[]
    NOT?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
    id?: IntFilter<"Turma"> | number
    ano?: IntFilter<"Turma"> | number
    materiaId?: IntFilter<"Turma"> | number
    escolaId?: IntFilter<"Turma"> | number
    createdAt?: DateTimeFilter<"Turma"> | Date | string
    updatedAt?: DateTimeFilter<"Turma"> | Date | string
  }

  export type TurmaCreateWithoutEscolaInput = {
    ano: number
    createdAt?: Date | string
    updatedAt?: Date | string
    materia: MateriaCreateNestedOneWithoutTurmasInput
    alunos?: TurmaAlunoCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateWithoutEscolaInput = {
    id?: number
    ano: number
    materiaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    alunos?: TurmaAlunoUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaCreateOrConnectWithoutEscolaInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutEscolaInput, TurmaUncheckedCreateWithoutEscolaInput>
  }

  export type AlunoCreateWithoutEscolaInput = {
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notas?: NotaCreateNestedManyWithoutAlunoInput
    turmas?: TurmaAlunoCreateNestedManyWithoutAlunoInput
  }

  export type AlunoUncheckedCreateWithoutEscolaInput = {
    id?: number
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
    notas?: NotaUncheckedCreateNestedManyWithoutAlunoInput
    turmas?: TurmaAlunoUncheckedCreateNestedManyWithoutAlunoInput
  }

  export type AlunoCreateOrConnectWithoutEscolaInput = {
    where: AlunoWhereUniqueInput
    create: XOR<AlunoCreateWithoutEscolaInput, AlunoUncheckedCreateWithoutEscolaInput>
  }

  export type TurmaUpsertWithWhereUniqueWithoutEscolaInput = {
    where: TurmaWhereUniqueInput
    update: XOR<TurmaUpdateWithoutEscolaInput, TurmaUncheckedUpdateWithoutEscolaInput>
    create: XOR<TurmaCreateWithoutEscolaInput, TurmaUncheckedCreateWithoutEscolaInput>
  }

  export type TurmaUpdateWithWhereUniqueWithoutEscolaInput = {
    where: TurmaWhereUniqueInput
    data: XOR<TurmaUpdateWithoutEscolaInput, TurmaUncheckedUpdateWithoutEscolaInput>
  }

  export type TurmaUpdateManyWithWhereWithoutEscolaInput = {
    where: TurmaScalarWhereInput
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyWithoutEscolaInput>
  }

  export type AlunoUpsertWithWhereUniqueWithoutEscolaInput = {
    where: AlunoWhereUniqueInput
    update: XOR<AlunoUpdateWithoutEscolaInput, AlunoUncheckedUpdateWithoutEscolaInput>
    create: XOR<AlunoCreateWithoutEscolaInput, AlunoUncheckedCreateWithoutEscolaInput>
  }

  export type AlunoUpdateWithWhereUniqueWithoutEscolaInput = {
    where: AlunoWhereUniqueInput
    data: XOR<AlunoUpdateWithoutEscolaInput, AlunoUncheckedUpdateWithoutEscolaInput>
  }

  export type AlunoUpdateManyWithWhereWithoutEscolaInput = {
    where: AlunoScalarWhereInput
    data: XOR<AlunoUpdateManyMutationInput, AlunoUncheckedUpdateManyWithoutEscolaInput>
  }

  export type AlunoScalarWhereInput = {
    AND?: AlunoScalarWhereInput | AlunoScalarWhereInput[]
    OR?: AlunoScalarWhereInput[]
    NOT?: AlunoScalarWhereInput | AlunoScalarWhereInput[]
    id?: IntFilter<"Aluno"> | number
    nome?: StringFilter<"Aluno"> | string
    escolaId?: IntFilter<"Aluno"> | number
    createdAt?: DateTimeFilter<"Aluno"> | Date | string
    updatedAt?: DateTimeFilter<"Aluno"> | Date | string
  }

  export type MateriaCreateWithoutTurmasInput = {
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MateriaUncheckedCreateWithoutTurmasInput = {
    id?: number
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MateriaCreateOrConnectWithoutTurmasInput = {
    where: MateriaWhereUniqueInput
    create: XOR<MateriaCreateWithoutTurmasInput, MateriaUncheckedCreateWithoutTurmasInput>
  }

  export type EscolaCreateWithoutTurmasInput = {
    nome: string
    endereco: string
    contato: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Aluno?: AlunoCreateNestedManyWithoutEscolaInput
  }

  export type EscolaUncheckedCreateWithoutTurmasInput = {
    id?: number
    nome: string
    endereco: string
    contato: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Aluno?: AlunoUncheckedCreateNestedManyWithoutEscolaInput
  }

  export type EscolaCreateOrConnectWithoutTurmasInput = {
    where: EscolaWhereUniqueInput
    create: XOR<EscolaCreateWithoutTurmasInput, EscolaUncheckedCreateWithoutTurmasInput>
  }

  export type TurmaAlunoCreateWithoutTurmaInput = {
    aluno: AlunoCreateNestedOneWithoutTurmasInput
    notas?: NotaCreateNestedManyWithoutTurmaAlunoInput
  }

  export type TurmaAlunoUncheckedCreateWithoutTurmaInput = {
    id?: number
    alunoId: number
    notas?: NotaUncheckedCreateNestedManyWithoutTurmaAlunoInput
  }

  export type TurmaAlunoCreateOrConnectWithoutTurmaInput = {
    where: TurmaAlunoWhereUniqueInput
    create: XOR<TurmaAlunoCreateWithoutTurmaInput, TurmaAlunoUncheckedCreateWithoutTurmaInput>
  }

  export type MateriaUpsertWithoutTurmasInput = {
    update: XOR<MateriaUpdateWithoutTurmasInput, MateriaUncheckedUpdateWithoutTurmasInput>
    create: XOR<MateriaCreateWithoutTurmasInput, MateriaUncheckedCreateWithoutTurmasInput>
    where?: MateriaWhereInput
  }

  export type MateriaUpdateToOneWithWhereWithoutTurmasInput = {
    where?: MateriaWhereInput
    data: XOR<MateriaUpdateWithoutTurmasInput, MateriaUncheckedUpdateWithoutTurmasInput>
  }

  export type MateriaUpdateWithoutTurmasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MateriaUncheckedUpdateWithoutTurmasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EscolaUpsertWithoutTurmasInput = {
    update: XOR<EscolaUpdateWithoutTurmasInput, EscolaUncheckedUpdateWithoutTurmasInput>
    create: XOR<EscolaCreateWithoutTurmasInput, EscolaUncheckedCreateWithoutTurmasInput>
    where?: EscolaWhereInput
  }

  export type EscolaUpdateToOneWithWhereWithoutTurmasInput = {
    where?: EscolaWhereInput
    data: XOR<EscolaUpdateWithoutTurmasInput, EscolaUncheckedUpdateWithoutTurmasInput>
  }

  export type EscolaUpdateWithoutTurmasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Aluno?: AlunoUpdateManyWithoutEscolaNestedInput
  }

  export type EscolaUncheckedUpdateWithoutTurmasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Aluno?: AlunoUncheckedUpdateManyWithoutEscolaNestedInput
  }

  export type TurmaAlunoUpsertWithWhereUniqueWithoutTurmaInput = {
    where: TurmaAlunoWhereUniqueInput
    update: XOR<TurmaAlunoUpdateWithoutTurmaInput, TurmaAlunoUncheckedUpdateWithoutTurmaInput>
    create: XOR<TurmaAlunoCreateWithoutTurmaInput, TurmaAlunoUncheckedCreateWithoutTurmaInput>
  }

  export type TurmaAlunoUpdateWithWhereUniqueWithoutTurmaInput = {
    where: TurmaAlunoWhereUniqueInput
    data: XOR<TurmaAlunoUpdateWithoutTurmaInput, TurmaAlunoUncheckedUpdateWithoutTurmaInput>
  }

  export type TurmaAlunoUpdateManyWithWhereWithoutTurmaInput = {
    where: TurmaAlunoScalarWhereInput
    data: XOR<TurmaAlunoUpdateManyMutationInput, TurmaAlunoUncheckedUpdateManyWithoutTurmaInput>
  }

  export type TurmaAlunoScalarWhereInput = {
    AND?: TurmaAlunoScalarWhereInput | TurmaAlunoScalarWhereInput[]
    OR?: TurmaAlunoScalarWhereInput[]
    NOT?: TurmaAlunoScalarWhereInput | TurmaAlunoScalarWhereInput[]
    id?: IntFilter<"TurmaAluno"> | number
    alunoId?: IntFilter<"TurmaAluno"> | number
    turmaId?: IntFilter<"TurmaAluno"> | number
  }

  export type EscolaCreateWithoutAlunoInput = {
    nome: string
    endereco: string
    contato: string
    createdAt?: Date | string
    updatedAt?: Date | string
    turmas?: TurmaCreateNestedManyWithoutEscolaInput
  }

  export type EscolaUncheckedCreateWithoutAlunoInput = {
    id?: number
    nome: string
    endereco: string
    contato: string
    createdAt?: Date | string
    updatedAt?: Date | string
    turmas?: TurmaUncheckedCreateNestedManyWithoutEscolaInput
  }

  export type EscolaCreateOrConnectWithoutAlunoInput = {
    where: EscolaWhereUniqueInput
    create: XOR<EscolaCreateWithoutAlunoInput, EscolaUncheckedCreateWithoutAlunoInput>
  }

  export type NotaCreateWithoutAlunoInput = {
    valor: number
    bimestre: number
    createdAt?: Date | string
    updatedAt?: Date | string
    turmaAluno: TurmaAlunoCreateNestedOneWithoutNotasInput
  }

  export type NotaUncheckedCreateWithoutAlunoInput = {
    id?: number
    valor: number
    bimestre: number
    turmaAlunoId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotaCreateOrConnectWithoutAlunoInput = {
    where: NotaWhereUniqueInput
    create: XOR<NotaCreateWithoutAlunoInput, NotaUncheckedCreateWithoutAlunoInput>
  }

  export type TurmaAlunoCreateWithoutAlunoInput = {
    turma: TurmaCreateNestedOneWithoutAlunosInput
    notas?: NotaCreateNestedManyWithoutTurmaAlunoInput
  }

  export type TurmaAlunoUncheckedCreateWithoutAlunoInput = {
    id?: number
    turmaId: number
    notas?: NotaUncheckedCreateNestedManyWithoutTurmaAlunoInput
  }

  export type TurmaAlunoCreateOrConnectWithoutAlunoInput = {
    where: TurmaAlunoWhereUniqueInput
    create: XOR<TurmaAlunoCreateWithoutAlunoInput, TurmaAlunoUncheckedCreateWithoutAlunoInput>
  }

  export type EscolaUpsertWithoutAlunoInput = {
    update: XOR<EscolaUpdateWithoutAlunoInput, EscolaUncheckedUpdateWithoutAlunoInput>
    create: XOR<EscolaCreateWithoutAlunoInput, EscolaUncheckedCreateWithoutAlunoInput>
    where?: EscolaWhereInput
  }

  export type EscolaUpdateToOneWithWhereWithoutAlunoInput = {
    where?: EscolaWhereInput
    data: XOR<EscolaUpdateWithoutAlunoInput, EscolaUncheckedUpdateWithoutAlunoInput>
  }

  export type EscolaUpdateWithoutAlunoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmas?: TurmaUpdateManyWithoutEscolaNestedInput
  }

  export type EscolaUncheckedUpdateWithoutAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmas?: TurmaUncheckedUpdateManyWithoutEscolaNestedInput
  }

  export type NotaUpsertWithWhereUniqueWithoutAlunoInput = {
    where: NotaWhereUniqueInput
    update: XOR<NotaUpdateWithoutAlunoInput, NotaUncheckedUpdateWithoutAlunoInput>
    create: XOR<NotaCreateWithoutAlunoInput, NotaUncheckedCreateWithoutAlunoInput>
  }

  export type NotaUpdateWithWhereUniqueWithoutAlunoInput = {
    where: NotaWhereUniqueInput
    data: XOR<NotaUpdateWithoutAlunoInput, NotaUncheckedUpdateWithoutAlunoInput>
  }

  export type NotaUpdateManyWithWhereWithoutAlunoInput = {
    where: NotaScalarWhereInput
    data: XOR<NotaUpdateManyMutationInput, NotaUncheckedUpdateManyWithoutAlunoInput>
  }

  export type NotaScalarWhereInput = {
    AND?: NotaScalarWhereInput | NotaScalarWhereInput[]
    OR?: NotaScalarWhereInput[]
    NOT?: NotaScalarWhereInput | NotaScalarWhereInput[]
    id?: IntFilter<"Nota"> | number
    valor?: IntFilter<"Nota"> | number
    bimestre?: IntFilter<"Nota"> | number
    turmaAlunoId?: IntFilter<"Nota"> | number
    alunoId?: IntNullableFilter<"Nota"> | number | null
    createdAt?: DateTimeFilter<"Nota"> | Date | string
    updatedAt?: DateTimeFilter<"Nota"> | Date | string
  }

  export type TurmaAlunoUpsertWithWhereUniqueWithoutAlunoInput = {
    where: TurmaAlunoWhereUniqueInput
    update: XOR<TurmaAlunoUpdateWithoutAlunoInput, TurmaAlunoUncheckedUpdateWithoutAlunoInput>
    create: XOR<TurmaAlunoCreateWithoutAlunoInput, TurmaAlunoUncheckedCreateWithoutAlunoInput>
  }

  export type TurmaAlunoUpdateWithWhereUniqueWithoutAlunoInput = {
    where: TurmaAlunoWhereUniqueInput
    data: XOR<TurmaAlunoUpdateWithoutAlunoInput, TurmaAlunoUncheckedUpdateWithoutAlunoInput>
  }

  export type TurmaAlunoUpdateManyWithWhereWithoutAlunoInput = {
    where: TurmaAlunoScalarWhereInput
    data: XOR<TurmaAlunoUpdateManyMutationInput, TurmaAlunoUncheckedUpdateManyWithoutAlunoInput>
  }

  export type AlunoCreateWithoutTurmasInput = {
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
    escola: EscolaCreateNestedOneWithoutAlunoInput
    notas?: NotaCreateNestedManyWithoutAlunoInput
  }

  export type AlunoUncheckedCreateWithoutTurmasInput = {
    id?: number
    nome: string
    escolaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    notas?: NotaUncheckedCreateNestedManyWithoutAlunoInput
  }

  export type AlunoCreateOrConnectWithoutTurmasInput = {
    where: AlunoWhereUniqueInput
    create: XOR<AlunoCreateWithoutTurmasInput, AlunoUncheckedCreateWithoutTurmasInput>
  }

  export type TurmaCreateWithoutAlunosInput = {
    ano: number
    createdAt?: Date | string
    updatedAt?: Date | string
    materia: MateriaCreateNestedOneWithoutTurmasInput
    escola: EscolaCreateNestedOneWithoutTurmasInput
  }

  export type TurmaUncheckedCreateWithoutAlunosInput = {
    id?: number
    ano: number
    materiaId: number
    escolaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TurmaCreateOrConnectWithoutAlunosInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutAlunosInput, TurmaUncheckedCreateWithoutAlunosInput>
  }

  export type NotaCreateWithoutTurmaAlunoInput = {
    valor: number
    bimestre: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Aluno?: AlunoCreateNestedOneWithoutNotasInput
  }

  export type NotaUncheckedCreateWithoutTurmaAlunoInput = {
    id?: number
    valor: number
    bimestre: number
    alunoId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotaCreateOrConnectWithoutTurmaAlunoInput = {
    where: NotaWhereUniqueInput
    create: XOR<NotaCreateWithoutTurmaAlunoInput, NotaUncheckedCreateWithoutTurmaAlunoInput>
  }

  export type AlunoUpsertWithoutTurmasInput = {
    update: XOR<AlunoUpdateWithoutTurmasInput, AlunoUncheckedUpdateWithoutTurmasInput>
    create: XOR<AlunoCreateWithoutTurmasInput, AlunoUncheckedCreateWithoutTurmasInput>
    where?: AlunoWhereInput
  }

  export type AlunoUpdateToOneWithWhereWithoutTurmasInput = {
    where?: AlunoWhereInput
    data: XOR<AlunoUpdateWithoutTurmasInput, AlunoUncheckedUpdateWithoutTurmasInput>
  }

  export type AlunoUpdateWithoutTurmasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    escola?: EscolaUpdateOneRequiredWithoutAlunoNestedInput
    notas?: NotaUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoUncheckedUpdateWithoutTurmasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NotaUncheckedUpdateManyWithoutAlunoNestedInput
  }

  export type TurmaUpsertWithoutAlunosInput = {
    update: XOR<TurmaUpdateWithoutAlunosInput, TurmaUncheckedUpdateWithoutAlunosInput>
    create: XOR<TurmaCreateWithoutAlunosInput, TurmaUncheckedCreateWithoutAlunosInput>
    where?: TurmaWhereInput
  }

  export type TurmaUpdateToOneWithWhereWithoutAlunosInput = {
    where?: TurmaWhereInput
    data: XOR<TurmaUpdateWithoutAlunosInput, TurmaUncheckedUpdateWithoutAlunosInput>
  }

  export type TurmaUpdateWithoutAlunosInput = {
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materia?: MateriaUpdateOneRequiredWithoutTurmasNestedInput
    escola?: EscolaUpdateOneRequiredWithoutTurmasNestedInput
  }

  export type TurmaUncheckedUpdateWithoutAlunosInput = {
    id?: IntFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    materiaId?: IntFieldUpdateOperationsInput | number
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotaUpsertWithWhereUniqueWithoutTurmaAlunoInput = {
    where: NotaWhereUniqueInput
    update: XOR<NotaUpdateWithoutTurmaAlunoInput, NotaUncheckedUpdateWithoutTurmaAlunoInput>
    create: XOR<NotaCreateWithoutTurmaAlunoInput, NotaUncheckedCreateWithoutTurmaAlunoInput>
  }

  export type NotaUpdateWithWhereUniqueWithoutTurmaAlunoInput = {
    where: NotaWhereUniqueInput
    data: XOR<NotaUpdateWithoutTurmaAlunoInput, NotaUncheckedUpdateWithoutTurmaAlunoInput>
  }

  export type NotaUpdateManyWithWhereWithoutTurmaAlunoInput = {
    where: NotaScalarWhereInput
    data: XOR<NotaUpdateManyMutationInput, NotaUncheckedUpdateManyWithoutTurmaAlunoInput>
  }

  export type TurmaAlunoCreateWithoutNotasInput = {
    aluno: AlunoCreateNestedOneWithoutTurmasInput
    turma: TurmaCreateNestedOneWithoutAlunosInput
  }

  export type TurmaAlunoUncheckedCreateWithoutNotasInput = {
    id?: number
    alunoId: number
    turmaId: number
  }

  export type TurmaAlunoCreateOrConnectWithoutNotasInput = {
    where: TurmaAlunoWhereUniqueInput
    create: XOR<TurmaAlunoCreateWithoutNotasInput, TurmaAlunoUncheckedCreateWithoutNotasInput>
  }

  export type AlunoCreateWithoutNotasInput = {
    nome: string
    createdAt?: Date | string
    updatedAt?: Date | string
    escola: EscolaCreateNestedOneWithoutAlunoInput
    turmas?: TurmaAlunoCreateNestedManyWithoutAlunoInput
  }

  export type AlunoUncheckedCreateWithoutNotasInput = {
    id?: number
    nome: string
    escolaId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    turmas?: TurmaAlunoUncheckedCreateNestedManyWithoutAlunoInput
  }

  export type AlunoCreateOrConnectWithoutNotasInput = {
    where: AlunoWhereUniqueInput
    create: XOR<AlunoCreateWithoutNotasInput, AlunoUncheckedCreateWithoutNotasInput>
  }

  export type TurmaAlunoUpsertWithoutNotasInput = {
    update: XOR<TurmaAlunoUpdateWithoutNotasInput, TurmaAlunoUncheckedUpdateWithoutNotasInput>
    create: XOR<TurmaAlunoCreateWithoutNotasInput, TurmaAlunoUncheckedCreateWithoutNotasInput>
    where?: TurmaAlunoWhereInput
  }

  export type TurmaAlunoUpdateToOneWithWhereWithoutNotasInput = {
    where?: TurmaAlunoWhereInput
    data: XOR<TurmaAlunoUpdateWithoutNotasInput, TurmaAlunoUncheckedUpdateWithoutNotasInput>
  }

  export type TurmaAlunoUpdateWithoutNotasInput = {
    aluno?: AlunoUpdateOneRequiredWithoutTurmasNestedInput
    turma?: TurmaUpdateOneRequiredWithoutAlunosNestedInput
  }

  export type TurmaAlunoUncheckedUpdateWithoutNotasInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
  }

  export type AlunoUpsertWithoutNotasInput = {
    update: XOR<AlunoUpdateWithoutNotasInput, AlunoUncheckedUpdateWithoutNotasInput>
    create: XOR<AlunoCreateWithoutNotasInput, AlunoUncheckedCreateWithoutNotasInput>
    where?: AlunoWhereInput
  }

  export type AlunoUpdateToOneWithWhereWithoutNotasInput = {
    where?: AlunoWhereInput
    data: XOR<AlunoUpdateWithoutNotasInput, AlunoUncheckedUpdateWithoutNotasInput>
  }

  export type AlunoUpdateWithoutNotasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    escola?: EscolaUpdateOneRequiredWithoutAlunoNestedInput
    turmas?: TurmaAlunoUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoUncheckedUpdateWithoutNotasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmas?: TurmaAlunoUncheckedUpdateManyWithoutAlunoNestedInput
  }

  export type TurmaUpdateWithoutMateriaInput = {
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    escola?: EscolaUpdateOneRequiredWithoutTurmasNestedInput
    alunos?: TurmaAlunoUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateWithoutMateriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunos?: TurmaAlunoUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateManyWithoutMateriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    escolaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurmaUpdateWithoutEscolaInput = {
    ano?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    materia?: MateriaUpdateOneRequiredWithoutTurmasNestedInput
    alunos?: TurmaAlunoUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateWithoutEscolaInput = {
    id?: IntFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    materiaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alunos?: TurmaAlunoUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateManyWithoutEscolaInput = {
    id?: IntFieldUpdateOperationsInput | number
    ano?: IntFieldUpdateOperationsInput | number
    materiaId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlunoUpdateWithoutEscolaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NotaUpdateManyWithoutAlunoNestedInput
    turmas?: TurmaAlunoUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoUncheckedUpdateWithoutEscolaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notas?: NotaUncheckedUpdateManyWithoutAlunoNestedInput
    turmas?: TurmaAlunoUncheckedUpdateManyWithoutAlunoNestedInput
  }

  export type AlunoUncheckedUpdateManyWithoutEscolaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurmaAlunoUpdateWithoutTurmaInput = {
    aluno?: AlunoUpdateOneRequiredWithoutTurmasNestedInput
    notas?: NotaUpdateManyWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunoUncheckedUpdateWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
    notas?: NotaUncheckedUpdateManyWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunoUncheckedUpdateManyWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    alunoId?: IntFieldUpdateOperationsInput | number
  }

  export type NotaUpdateWithoutAlunoInput = {
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turmaAluno?: TurmaAlunoUpdateOneRequiredWithoutNotasNestedInput
  }

  export type NotaUncheckedUpdateWithoutAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    turmaAlunoId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotaUncheckedUpdateManyWithoutAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    turmaAlunoId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurmaAlunoUpdateWithoutAlunoInput = {
    turma?: TurmaUpdateOneRequiredWithoutAlunosNestedInput
    notas?: NotaUpdateManyWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunoUncheckedUpdateWithoutAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
    notas?: NotaUncheckedUpdateManyWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunoUncheckedUpdateManyWithoutAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    turmaId?: IntFieldUpdateOperationsInput | number
  }

  export type NotaUpdateWithoutTurmaAlunoInput = {
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Aluno?: AlunoUpdateOneWithoutNotasNestedInput
  }

  export type NotaUncheckedUpdateWithoutTurmaAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    alunoId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotaUncheckedUpdateManyWithoutTurmaAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    valor?: IntFieldUpdateOperationsInput | number
    bimestre?: IntFieldUpdateOperationsInput | number
    alunoId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MateriaCountOutputTypeDefaultArgs instead
     */
    export type MateriaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MateriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EscolaCountOutputTypeDefaultArgs instead
     */
    export type EscolaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EscolaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaCountOutputTypeDefaultArgs instead
     */
    export type TurmaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlunoCountOutputTypeDefaultArgs instead
     */
    export type AlunoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlunoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaAlunoCountOutputTypeDefaultArgs instead
     */
    export type TurmaAlunoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmaAlunoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MateriaDefaultArgs instead
     */
    export type MateriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MateriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EscolaDefaultArgs instead
     */
    export type EscolaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EscolaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaDefaultArgs instead
     */
    export type TurmaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlunoDefaultArgs instead
     */
    export type AlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlunoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaAlunoDefaultArgs instead
     */
    export type TurmaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmaAlunoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotaDefaultArgs instead
     */
    export type NotaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}